{"version":3,"sources":["util.js","util.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","System","register","exports_1","context_1","fetchJSON","url","fetch","then","res","json","randomID","len","id","char","Math","random","toString","toUpperCase","getNum","el","parseInt","getAttribute","slice","getID","closest","parseEls","DOMString","document","createElement","innerHTML","Array","from","childNodes","parseEl","firstChild","on","type","selector","fn","addEventListener","event","matches","once","removeEventListener","onceAll","outerWidth","style","getComputedStyle","widths","marginLeft","marginRight","paddingLeft","paddingRight","total","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","width","value","err","isSage","email","trim","pad","n","parseHTML","callSite","output","arguments","replace","parseAttributes","attrs","html","val","commaList","items","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","item","setters","execute","SetMap","this","map","Set","add","set","size","forEach"],"mappings":"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","file":"util.js","sourcesContent":["System.register([], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var SetMap;\n    function fetchJSON(url) {\n        return fetch(\"api/\" + url).then(res => res.json());\n    }\n    exports_1(\"fetchJSON\", fetchJSON);\n    function randomID(len) {\n        let id = '';\n        for (let i = 0; i < len; i++) {\n            let char = (Math.random() * 36).toString(36)[0];\n            if (Math.random() < 0.5) {\n                char = char.toUpperCase();\n            }\n            id += char;\n        }\n        return id;\n    }\n    exports_1(\"randomID\", randomID);\n    function getNum(el) {\n        if (!el) {\n            return 0;\n        }\n        return parseInt(el.getAttribute('id').slice(1), 10);\n    }\n    exports_1(\"getNum\", getNum);\n    function getID(el) {\n        if (!el) {\n            return 0;\n        }\n        return getNum(el.closest('article, section'));\n    }\n    exports_1(\"getID\", getID);\n    function parseEls(DOMString) {\n        const el = document.createElement('div');\n        el.innerHTML = DOMString;\n        return Array.from(el.childNodes);\n    }\n    exports_1(\"parseEls\", parseEls);\n    function parseEl(DOMString) {\n        const el = document.createElement('div');\n        el.innerHTML = DOMString;\n        return el.firstChild;\n    }\n    exports_1(\"parseEl\", parseEl);\n    function on(el, type, selector, fn) {\n        el.addEventListener(type, event => {\n            if (event.target.matches(selector)) {\n                fn(event);\n            }\n        });\n    }\n    exports_1(\"on\", on);\n    function once(el, type, selector, fn) {\n        el.addEventListener(type, event => {\n            if (event.target.matches(selector)) {\n                fn(event);\n                el.removeEventListener(type, fn);\n            }\n        });\n    }\n    exports_1(\"once\", once);\n    function onceAll(el, type, fn) {\n        el.addEventListener(type, event => {\n            fn(event);\n            el.removeEventListener(type, fn);\n        });\n    }\n    exports_1(\"onceAll\", onceAll);\n    function outerWidth(el) {\n        const style = getComputedStyle(el);\n        const widths = [\n            style.marginLeft, style.marginRight, style.paddingLeft,\n            style.paddingRight\n        ];\n        let total = 0;\n        for (let width of widths) {\n            total += parseInt(width);\n        }\n        return total;\n    }\n    exports_1(\"outerWidth\", outerWidth);\n    function isSage(email) {\n        if (email) {\n            return email.trim() === 'sage';\n        }\n        return false;\n    }\n    exports_1(\"isSage\", isSage);\n    function pad(n) {\n        return (n < 10 ? '0' : '') + n;\n    }\n    exports_1(\"pad\", pad);\n    function parseHTML(callSite, ...args) {\n        let output = callSite[0];\n        for (let i = 1; i <= args.length; i++) {\n            output += args[i - 1] + callSite[i];\n        }\n        return output.replace(/\\s*\\n\\s*/g, '');\n    }\n    exports_1(\"parseHTML\", parseHTML);\n    function parseAttributes(attrs) {\n        let html = '';\n        for (let key in attrs) {\n            html += ' ';\n            const val = attrs[key];\n            if (val) {\n                html += `${key}=\"${val}\"`;\n            }\n            else {\n                html += key;\n            }\n        }\n        return html;\n    }\n    exports_1(\"parseAttributes\", parseAttributes);\n    function commaList(items) {\n        let html = '';\n        for (let item of items) {\n            if (html) {\n                html += ', ';\n            }\n            html += item;\n        }\n        return html;\n    }\n    exports_1(\"commaList\", commaList);\n    return {\n        setters:[],\n        execute: function() {\n            class SetMap {\n                constructor() {\n                    this.map = {};\n                }\n                add(key, item) {\n                    if (!(key in this.map)) {\n                        this.map[key] = new Set();\n                    }\n                    this.map[key].add(item);\n                }\n                remove(key, item) {\n                    const set = this.map[key];\n                    if (!set) {\n                        return;\n                    }\n                    set.delete(item);\n                    if (set.size === 0) {\n                        delete this.map[key];\n                    }\n                }\n                forEach(key, fn) {\n                    const set = this.map[key];\n                    if (!set) {\n                        return;\n                    }\n                    set.forEach(fn);\n                }\n            }\n            exports_1(\"SetMap\", SetMap);\n        }\n    }\n});\n","/*\n Utuility functions.\n*/\n\n// Fetches a JSON response from the API and returns a Promise\nexport function fetchJSON(url: string): Promise<Object> {\n\treturn fetch(\"api/\" + url).then(res => res.json())\n}\n\n// Generate a random alphannumeric string of lower and upper case hexadecimal\n// characters\nexport function randomID(len: number): string {\n\tlet id = ''\n\tfor (let i = 0; i < len; i++) {\n\t\tlet char = (Math.random() * 36).toString(36)[0]\n\t\tif (Math.random() < 0.5) {\n\t\t\tchar = char.toUpperCase()\n\t\t}\n\t\tid += char\n\t}\n\treturn id\n}\n\n// Simple map of sets with automatic array creation and removal\nexport class SetMap<V> {\n\tprivate map: {[key: string]: Set<V>} = {}\n\n\t// Add item to key\n\tadd(key: string, item: V) {\n\t\tif (!(key in this.map)) {\n\t\t\tthis.map[key] = new Set()\n\t\t}\n\t\tthis.map[key].add(item)\n\t}\n\n\t// Remove and item from a key\n\tremove(key: string, item: V) {\n\t\tconst set = this.map[key]\n\t\tif (!set) {\n\t\t\treturn\n\t\t}\n\t\tset.delete(item)\n\t\tif (set.size === 0) {\n\t\t\tdelete this.map[key]\n\t\t}\n\t}\n\n\t// Execute a function for each item under a key\n\tforEach(key: string, fn: (item: V) => void) {\n\t\tconst set = this.map[key]\n\t\tif (!set) {\n\t\t\treturn\n\t\t}\n\t\tset.forEach(fn)\n\t}\n}\n\n// Retrieve post number of post element\nexport function getNum(el: Element): number {\n\tif (!el) {\n\t\treturn 0\n\t}\n\treturn parseInt(el.getAttribute('id').slice(1), 10)\n}\n\n// Retrieve post number of closest parent post element\nexport function getID(el: Element): number {\n\tif (!el) {\n\t\treturn 0\n\t}\n\treturn getNum(el.closest('article, section'))\n}\n\n// Parse HTML string to node array\nexport function parseEls(DOMString: string): Node[] {\n\tconst el = document.createElement('div')\n\tel.innerHTML = DOMString\n\treturn Array.from(el.childNodes)\n}\n\n// Parse HTML string to a single Node\nexport function parseEl(DOMString: string): Node {\n\tconst el = document.createElement('div')\n\tel.innerHTML = DOMString\n\treturn el.firstChild\n}\n\n// Add an event listener that filters targets according to a CSS selector\nexport function on(\n\tel: Element,\n\ttype: string,\n\tselector: string,\n\tfn: EventListener\n) {\n\tel.addEventListener(type, event => {\n\t\tif (event.target.matches(selector)) {\n\t\t\tfn(event)\n\t\t}\n\t})\n}\n\n// Add event listener to element, that will only be executed once with a\n// specific tartget.\nexport function once(\n\tel: Element,\n\ttype: string,\n\tselector: string,\n\tfn: EventListener\n) {\n\tel.addEventListener(type, event => {\n\t\tif (event.target.matches(selector)) {\n\t\t\tfn(event)\n\t\t\tel.removeEventListener(type, fn)\n\t\t}\n\t})\n}\n\n// Add event listener to element, that will only be executed once\nexport function onceAll(el: Element, type: string, fn: EventListener) {\n\tel.addEventListener(type, event => {\n\t\tfn(event)\n\t\tel.removeEventListener(type, fn)\n\t})\n}\n\n// Return width of element with padding and margin\nexport function outerWidth(el: Element): number {\n\tconst style =  getComputedStyle(el)\n\tconst widths = [\n\t\tstyle.marginLeft, style.marginRight, style.paddingLeft,\n\t\tstyle.paddingRight\n\t]\n\tlet total = 0\n\tfor (let width of widths) {\n\t\ttotal += parseInt(width)\n\t}\n\treturn total\n}\n\n// Confirms email is saging\nexport function isSage(email: string) :boolean {\n\tif (email) {\n\t\treturn email.trim() === 'sage'\n\t}\n\treturn false\n}\n\n// Pad an integer with a leading zero, if below 10\nexport function pad(n: number): string {\n\treturn (n < 10 ? '0' : '') + n\n}\n\n// Template string tag function for HTML. Strips indentation and trailing\n// newlines. Based on https://gist.github.com/zenparsing/5dffde82d9acef19e43c\nexport function parseHTML(callSite: string[], ...args: string[]): string {\n\tlet output = callSite[0]\n\tfor (let i = 1; i <= args.length; i++) {\n\t\toutput += args[i - 1] + callSite[i]\n\t}\n\n\t// Strip indentation and remove empty lines from HTML string\n\treturn output.replace(/\\s*\\n\\s*/g, '')\n}\n\nexport type ElementAttributes = {[key: string]: string}\n\n// Generate an HTML element attribute list. If a key has an empty string, it's\n// value will be considered \"true\"\nexport function parseAttributes(attrs: ElementAttributes): string {\n\tlet html = ''\n\tfor (let key in attrs) {\n\t\thtml += ' '\n\t\tconst val = attrs[key]\n\t\tif (val) {\n\t\t\thtml += `${key}=\"${val}\"`\n\t\t} else {\n\t\t\thtml += key\n\t\t}\n\t}\n\treturn html\n}\n\n// Makes a ', ' seperated list\nexport function commaList(items: string[]): string {\n\tlet html = ''\n\tfor (let item of items) {\n\t\tif (html) {\n\t\t\thtml += ', '\n\t\t}\n\t\thtml += item\n\t}\n\treturn html\n}\n"],"sourceRoot":"/source/"}