{"version":3,"sources":["options/view.js","options/view.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","System","register","exports_1","context_1","modal_1","render_1","options_1","underscore_1","util_1","lang_1","id","setters","modal_1_1","render_1_1","options_1_1","underscore_1_1","util_1_1","lang_1_1","execute","OptionsPanel","_modal_1$BannerModal","this","_this","getPrototypeOf","onClick",".tab_link","e","switchTab","#export","exportConfigs","#import","importConfigs","#hidden","clearHidden","onAll","applyChange","el","innerHTML","assignValues","$hidden","query","models","model","val","get","spec","type","checked","String","fromCharCode","toUpperCase","event","getAttribute","undefined","parseInt","charCodeAt","validate","set","preventDefault","each","children","classList","remove","add","find","lastChild","li","contains","a","document","getElementById","blob","Blob","JSON","stringify","localStorage","setAttribute","window","URL","createObjectURL","click","onceAll","reader","FileReader","readAsText","files","onload","json","parse","result","err","alert","opts","importConfig","corrupt","clear","setItem","done","location","reload","count","textContent","replace","toString","renderHidden","BannerModal","tick","clicked","style","opacity","out","now","requestAnimationFrame","getItem","addEventListener"],"mappings":"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","file":"options/view.js","sourcesContent":["System.register(['../modal', './render', '../options', 'underscore', '../util', '../lang'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var modal_1, render_1, options_1, underscore_1, util_1, lang_1;\n    var OptionsPanel;\n    return {\n        setters:[\n            function (modal_1_1) {\n                modal_1 = modal_1_1;\n            },\n            function (render_1_1) {\n                render_1 = render_1_1;\n            },\n            function (options_1_1) {\n                options_1 = options_1_1;\n            },\n            function (underscore_1_1) {\n                underscore_1 = underscore_1_1;\n            },\n            function (util_1_1) {\n                util_1 = util_1_1;\n            },\n            function (lang_1_1) {\n                lang_1 = lang_1_1;\n            }],\n        execute: function() {\n            class OptionsPanel extends modal_1.BannerModal {\n                constructor() {\n                    super({ id: 'options-panel' });\n                    this.onClick({\n                        '.tab_link': e => this.switchTab(e),\n                        '#export': () => this.exportConfigs(),\n                        '#import': e => this.importConfigs(e),\n                        '#hidden': () => this.clearHidden()\n                    });\n                    this.onAll('change', e => this.applyChange(e));\n                }\n                render() {\n                    this.el.innerHTML = render_1.default();\n                    this.assignValues();\n                    this.$hidden = this.el.query('#hidden');\n                }\n                assignValues() {\n                    for (let id in options_1.models) {\n                        const model = options_1.models[id], el = this.el.query('#' + id), val = model.get();\n                        switch (model.spec.type) {\n                            case 0:\n                                el.checked = val;\n                                break;\n                            case 1:\n                            case 4:\n                                el.value = val;\n                                break;\n                            case 3:\n                                el.value = String.fromCharCode(val).toUpperCase();\n                                break;\n                        }\n                    }\n                }\n                applyChange(event) {\n                    const el = event.target, id = el.getAttribute('id'), model = options_1.models[id];\n                    let val;\n                    switch (model.spec.type) {\n                        case 0:\n                            val = el.checked;\n                            break;\n                        case 1:\n                            val = parseInt(el.value);\n                            break;\n                        case 4:\n                            val = el.value;\n                            break;\n                        case 3:\n                            val = el.value.toUpperCase().charCodeAt(0);\n                            break;\n                    }\n                    if (!model.validate(val)) {\n                        el.value = '';\n                    }\n                    else {\n                        options_1.default.set(id, val);\n                    }\n                }\n                switchTab(event) {\n                    event.preventDefault();\n                    const el = event.target;\n                    underscore_1.each(this.el.children, el => el.query('.tab_sel').classList.remove('tab_sel'));\n                    el.classList.add('tab_sel');\n                    underscore_1.find(this.el.lastChild.children, li => li.classList.contains(el.getAttribute('data-content')))\n                        .classList.add('tab_sel');\n                }\n                exportConfigs() {\n                    const a = document.getElementById('export');\n                    const blob = new Blob([JSON.stringify(localStorage)], {\n                        type: 'octet/stream'\n                    });\n                    a.setAttribute('href', window.URL.createObjectURL(blob));\n                    a.setAttribute('download', 'meguca-config.json');\n                }\n                importConfigs(event) {\n                    event.preventDefault();\n                    const el = document.query('#importSettings');\n                    el.click();\n                    util_1.onceAll(el, 'change', () => {\n                        const reader = new FileReader();\n                        reader.readAsText(el.files[0]);\n                        reader.onload = event => {\n                            event;\n                            let json;\n                            try {\n                                json = JSON.parse(event.target.result);\n                            }\n                            catch (err) {\n                                alert(lang_1.opts.importConfig.corrupt);\n                                return;\n                            }\n                            localStorage.clear();\n                            for (let key in json) {\n                                localStorage.setItem(key, json[key]);\n                            }\n                            alert(lang_1.opts.importConfig.done);\n                            location.reload();\n                        };\n                    });\n                }\n                renderHidden(count) {\n                    const el = this.$hidden;\n                    el.textContent = el.textContent.replace(/\\d+$/, count.toString());\n                }\n                clearHidden() {\n                    this.renderHidden(0);\n                }\n            }\n            exports_1(\"default\", OptionsPanel);\n            (function () {\n                if (localStorage.getItem('optionsSeen')) {\n                    return;\n                }\n                const el = document.query('#options');\n                el.style.opacity = '1';\n                let out = true, clicked;\n                el.addEventListener(\"click\", () => {\n                    clicked = true;\n                    localStorage.setItem('optionsSeen', '1');\n                });\n                tick();\n                function tick() {\n                    if (clicked) {\n                        el.style.opacity = '1';\n                        return;\n                    }\n                    el.style.opacity = (+el.style.opacity + (out ? -0.02 : 0.02)).toString();\n                    const now = +el.style.opacity;\n                    if ((out && now <= 0) || (!out && now >= 1)) {\n                        out = !out;\n                    }\n                    requestAnimationFrame(tick);\n                }\n            })();\n        }\n    }\n});\n","import {BannerModal} from '../modal'\nimport renderContents from './render'\nimport {models, default as options} from '../options'\nimport {optionType} from './specs'\nimport {each, find} from 'underscore'\nimport {onceAll} from '../util'\nimport {opts as lang} from '../lang'\n\n// View of the options panel\nexport default class OptionsPanel extends BannerModal {\n\t$hidden: Element\n\n\tconstructor() {\n\t\tsuper({id: 'options-panel'})\n\t\tthis.onClick({\n\t\t\t'.tab_link': e => this.switchTab(e),\n\t\t\t'#export': () => this.exportConfigs(),\n\t\t\t'#import': e => this.importConfigs(e),\n\t\t\t'#hidden': () => this.clearHidden()\n\t\t})\n\t\tthis.onAll('change', e => this.applyChange(e))\n\t}\n\n\t// Render the contents of the options panel and insert it into the DOM\n\trender() {\n\t\tthis.el.innerHTML = renderContents()\n\t\tthis.assignValues()\n\t\tthis.$hidden = this.el.query('#hidden')\n\n\t\t// TODO: Hidden posts count rendering\n\t\t// events.reply('hide:render', this.renderHidden, this)\n\t}\n\n\t// Assign loaded option settings to the respective elements in the options\n\t// panel\n\tassignValues() {\n\t\tfor (let id in models) {\n\t\t\tconst model = models[id],\n\t\t\t\tel = this.el.query('#' + id),\n\t\t\t\tval = model.get()\n\t\t\tswitch (model.spec.type) {\n\t\t\tcase optionType.checkbox:\n\t\t\t\tel.checked = val as boolean\n\t\t\t\tbreak\n\t\t\tcase optionType.number:\n\t\t\tcase optionType.menu:\n\t\t\t\tel.value = val\n\t\t\t\tbreak\n\t\t\tcase optionType.shortcut:\n\t\t\t\tel.value = String.fromCharCode(val as number).toUpperCase()\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// 'image' type simply falls through, as those don't need to be set\n\t\t}\n\t}\n\n\t// Propagate options panel changes through\n\t// options-panel -> options -> OptionModel\n\tapplyChange(event: Event) {\n\t\tconst el = event.target as Element,\n\t\t\tid = el.getAttribute('id'),\n\t\t\tmodel = models[id]\n\t\tlet val: boolean|string|number\n\t\tswitch (model.spec.type) {\n\t\tcase optionType.checkbox:\n\t\t\tval = el.checked\n\t\t\tbreak\n\t\tcase optionType.number:\n\t\t\tval = parseInt(el.value)\n\t\t\tbreak\n\t\tcase optionType.menu:\n\t\t\tval = el.value\n\t\t\tbreak\n\t\tcase optionType.shortcut:\n\t\t\tval = el.value.toUpperCase().charCodeAt(0)\n\t\t\tbreak\n\n\t\t/*\n\t\tTODO: System.import().then()\n\t\tcase 'image':\n\t\t\t// Not recorded. Extracted directly by the background handler.\n\t\t\treturn events.request('background:store', event.target)\n\t\t*/\n\t\t}\n\n\t\tif (!model.validate(val)) {\n\t\t\tel.value = ''\n\t\t} else {\n\t\t\toptions.set(id, val)\n\t\t}\n\t}\n\n\t// Switch to a tab, when clicking the tab butt\n\tswitchTab(event: Event) {\n\t\tevent.preventDefault()\n\t\tconst el = event.target as Element\n\n\t\t// Deselect previous tab\n\t\teach(this.el.children, el =>\n\t\t\tel.query('.tab_sel').classList.remove('tab_sel'))\n\n\t\t// Select the new one\n\t\tel.classList.add('tab_sel')\n\t\tfind(this.el.lastChild.children, li =>\n\t\t\tli.classList.contains(el.getAttribute('data-content'))\n\t\t)\n\t\t\t.classList.add('tab_sel')\n\t}\n\n\t// Dump options to JSON file and upload to user\n\texportConfigs() {\n\t\tconst a = document.getElementById('export')\n\t\tconst blob = new Blob([JSON.stringify(localStorage)], {\n\t\t\ttype: 'octet/stream'\n\t\t})\n\t\ta.setAttribute('href', window.URL.createObjectURL(blob))\n\t\ta.setAttribute('download', 'meguca-config.json')\n\t}\n\n\t// Import options from uploaded JSON file\n\timportConfigs(event: Event) {\n\t\t// Proxy to hidden file input\n\t\tevent.preventDefault()\n\t\tconst el = document.query('#importSettings')\n\t\tel.click()\n\t\tonceAll(el, 'change', () => {\n\t\t\tconst reader = new FileReader()\n\t\t\treader.readAsText(el.files[0])\n\t\t\treader.onload = event => {\n\t\t\t\tevent as FileReaderOnloadEvent\n\n\t\t\t\t// In case of curruption\n\t\t\t\tlet json: {[key: string]: string}\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(event.target.result)\n\t\t\t\t}\n\t\t\t\tcatch(err) {\n\t\t\t\t\talert(lang.importConfig.corrupt)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlocalStorage.clear()\n\t\t\t\tfor (let key in json) {\n\t\t\t\t\tlocalStorage.setItem(key, json[key])\n\t\t\t\t}\n\t\t\t\talert(lang.importConfig.done)\n\t\t\t\tlocation.reload()\n\t\t\t}\n\t\t})\n\t}\n\n\t// Render Hiden posts counter\n\trenderHidden(count: number) {\n\t\tconst el = this.$hidden\n\t\tel.textContent = el.textContent.replace(/\\d+$/, count.toString())\n\t}\n\n\t// Clear displayed hidden post counter\n\tclearHidden() {\n\n\t\t// TODO: Fix  after psot hiding ported\n\t\t// main.request('hide:clear')\n\n\t\tthis.renderHidden(0)\n\t}\n}\n\n// Highlight options button by fading out and in, if no options are set\n(function() {\n\tif (localStorage.getItem('optionsSeen')) {\n\t\treturn\n\t}\n\tconst el = document.query('#options')\n\tel.style.opacity = '1'\n\tlet out = true,\n\t\tclicked: boolean\n\tel.addEventListener(\"click\", () => {\n\t\tclicked = true\n\t\tlocalStorage.setItem('optionsSeen', '1')\n\t})\n\ttick()\n\n\tfunction tick() {\n\t\t// Stop\n\t\tif (clicked) {\n\t\t\tel.style.opacity = '1'\n\t\t\treturn\n\t\t}\n\n\t\tel.style.opacity = (+el.style.opacity + (out ? -0.02 : 0.02)).toString()\n\t\tconst now = +el.style.opacity\n\n\t\t// Reverse direction\n\t\tif ((out && now <= 0) || (!out && now >= 1)) {\n\t\t\tout = !out\n\t\t}\n\t\trequestAnimationFrame(tick)\n\t}\n})()\n"],"sourceRoot":"/source/"}