{"version":3,"sources":["options/render.js","options/render.ts"],"names":["_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","length","err","Array","isArray","TypeError","_templateObject","_templateObject2","_templateObject3","_templateObject4","System","register","exports_1","context_1","default_1","html","tabs","lang_1","opts","byTab","underscore_1","groupBy","specs_1","specs","filter","spec","noLoad","hidden","attrs","data-content","class","util_1","parseHTML","parseAttributes","renderTab","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","opt","renderOption","renderExtras","type","renderInput","id","maxlength","style","renderMenu","_lang_1$opts$labels$i","labels","label","title","extend","renderLabel","_ref","list","_lang_1$opts$labels$i2","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","item","modes","links","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_lang_1$opts$labels$i3","name","setters","underscore_1_1","util_1_1","lang_1_1","specs_1_1","execute"],"mappings":"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","file":"options/render.js","sourcesContent":["System.register(['underscore', '../util', '../lang', './specs'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var underscore_1, util_1, lang_1, specs_1;\n    function default_1() {\n        let html = '<ul class=\"option_tab_sel\">';\n        const { tabs } = lang_1.opts, byTab = underscore_1.groupBy(specs_1.specs, 'tab'), opts = [];\n        for (let i = 0; i < tabs.length; i++) {\n            opts[i] = underscore_1.filter(byTab[i], spec => !spec.noLoad && !spec.hidden);\n            if (!opts[i].length) {\n                continue;\n            }\n            const attrs = {\n                'data-content': `tab-${i}`,\n                class: 'tab_link'\n            };\n            if (i === 0) {\n                attrs['class'] += ' tab_sel';\n            }\n            html += util_1.parseHTML `<li>\n\t\t\t\t<a ${util_1.parseAttributes(attrs)}>\n\t\t\t\t\t${tabs[i]}\n\t\t\t\t</a>\n\t\t\t</li>`;\n        }\n        html += '</ul><ul class=\"option_tab_cont\">';\n        for (let i = 0; i < opts.length; i++) {\n            html += renderTab(opts[i], i);\n        }\n        html += '</ul>';\n        return html;\n    }\n    exports_1(\"default\", default_1);\n    function renderTab(opts, i) {\n        if (!opts.length) {\n            return '';\n        }\n        let html = '';\n        html += `<li class=\"tab-${i}`;\n        if (i === 0) {\n            html += ' tab_sel';\n        }\n        html += '\">';\n        for (let opt of opts) {\n            html += renderOption(opt);\n        }\n        if (i === 0) {\n            html += renderExtras();\n        }\n        html += '</li>';\n        return html;\n    }\n    function renderOption(spec) {\n        switch (spec.type) {\n            case 3:\n                return 'Alt+' + renderInput(spec.id, { maxlength: '1' });\n            case 0:\n                return renderInput(spec.id, { type: 'checkbox' });\n            case 1:\n                return renderInput(spec.id, {\n                    style: 'width: 4em;',\n                    maxlength: '4'\n                });\n            case 2:\n                return renderInput(spec.id, { type: 'file' });\n            case 4:\n                return renderMenu(spec);\n        }\n    }\n    function renderInput(id, attrs) {\n        const [label, title] = lang_1.opts.labels[id];\n        underscore_1.extend(attrs, { id: id, title: title });\n        return `<input ${util_1.parseAttributes(attrs)}>` + renderLabel(id, title, label);\n    }\n    function renderLabel(id, title, label) {\n        return util_1.parseHTML `<label for=\"${id}\" title=\"${title}\">\n\t\t\t${label}\n\t\t</label>\n\t\t<br>`;\n    }\n    function renderMenu({ id, list }) {\n        const [label, title] = lang_1.opts.labels[id];\n        let html = `<select id=\"${id}\" title=\"${title}\">`;\n        for (let item of list) {\n            html += util_1.parseHTML `<option value=\"${item}\">\n\t\t\t\t${lang_1.opts.modes[item] || item}\n\t\t\t</option>`;\n        }\n        html += '</select>' + renderLabel(id, title, label);\n        return html;\n    }\n    function renderExtras() {\n        let html = '<br>';\n        const links = ['export', 'import', 'hidden'];\n        for (let id of links) {\n            const [label, title] = lang_1.opts.labels[id];\n            html += util_1.parseHTML `<a id=\"${id}\" title=\"${title}\">\n\t\t\t\t${label}\n\t\t\t</a> `;\n        }\n        const attrs = {\n            type: 'file',\n            id: 'importSettings',\n            name: \"Import Settings\"\n        };\n        html += `<input ${util_1.parseAttributes(attrs)}>`;\n        return html;\n    }\n    return {\n        setters:[\n            function (underscore_1_1) {\n                underscore_1 = underscore_1_1;\n            },\n            function (util_1_1) {\n                util_1 = util_1_1;\n            },\n            function (lang_1_1) {\n                lang_1 = lang_1_1;\n            },\n            function (specs_1_1) {\n                specs_1 = specs_1_1;\n            }],\n        execute: function() {\n        }\n    }\n});\n","/*\n Renders the HTML of the options panel\n*/\n\nimport {filter, extend, groupBy} from 'underscore'\nimport {parseHTML, parseAttributes, ElementAttributes} from '../util'\nimport {opts as lang, OptLabel} from '../lang'\nimport {specs, OptionSpec, optionType} from './specs'\nimport {OptionID} from '../options'\n\n// Render the inner HTML of the options panel\nexport default function (): string {\n\tlet html = '<ul class=\"option_tab_sel\">'\n\tconst {tabs} = lang,\n\t\tbyTab = groupBy(specs, 'tab'),\n\t\topts: OptionSpec[][] = []\n\n\t// Render tab butts\n\tfor (let i = 0; i < tabs.length; i++) {\n\t\t// Pick the options for this specific tab, according to current\n\t\t// template and server configuration\n\t\topts[i] = filter<OptionSpec>(byTab[i], spec =>\n\t\t\t!spec.noLoad && !spec.hidden)\n\n\t\tif (!opts[i].length) {\n\t\t\tcontinue\n\t\t}\n\t\tconst attrs: ElementAttributes = {\n\t\t\t'data-content': `tab-${i}`,\n\t\t\tclass: 'tab_link'\n\t\t}\n\n\t\t// Highlight the first tabButt by default\n\t\tif (i === 0) {\n\t\t\tattrs['class'] += ' tab_sel'\n\t\t}\n\t\thtml += parseHTML\n\t\t\t`<li>\n\t\t\t\t<a ${parseAttributes(attrs)}>\n\t\t\t\t\t${tabs[i]}\n\t\t\t\t</a>\n\t\t\t</li>`\n\t}\n\n\thtml += '</ul><ul class=\"option_tab_cont\">'\n\tfor (let i = 0; i < opts.length; i++) {\n\t\thtml += renderTab(opts[i], i)\n\t}\n\thtml += '</ul>'\n\n\treturn html\n}\n\n// Render tab contents\nfunction renderTab(opts: OptionSpec[], i: number): string {\n\tif (!opts.length) {\n\t\treturn ''\n\t}\n\tlet html = ''\n\thtml += `<li class=\"tab-${i}`\n\n\t// Show the first tab by default\n\tif (i === 0) {\n\t\thtml += ' tab_sel'\n\t}\n\thtml += '\">'\n\n\t// Render the actual options\n\tfor (let opt of opts) {\n\t\thtml += renderOption(opt)\n\t}\n\n\tif (i === 0) {\n\t\thtml += renderExtras()\n\t}\n\thtml += '</li>'\n\n\treturn html\n}\n\n// Render a single option from it's schema\nfunction renderOption(spec: OptionSpec): string {\n\tswitch (spec.type) {\n\t\tcase optionType.shortcut:\n\t\t\treturn 'Alt+' + renderInput(spec.id, {maxlength: '1'})\n\t\tcase optionType.checkbox:\n\t\t\treturn renderInput(spec.id, {type: 'checkbox'})\n\t\tcase optionType.number:\n\t\t\treturn renderInput(spec.id, {\n\t\t\t\tstyle: 'width: 4em;',\n\t\t\t\tmaxlength: '4'\n\t\t\t})\n\t\tcase optionType.image:\n\t\t\treturn renderInput(spec.id, {type: 'file'})\n\t\tcase optionType.menu:\n\t\t\treturn renderMenu(spec)\n\t}\n}\n\n// Common input field render logic\nfunction renderInput(id: OptionID, attrs: ElementAttributes): string {\n\tconst [label, title] = lang.labels[id]\n\textend(attrs, {id, title})\n\treturn `<input ${parseAttributes(attrs)}>` + renderLabel(id, title, label)\n}\n\n// Render the description label to the right of the option\nfunction renderLabel(id: OptionID, title: string, label: string): string {\n\treturn parseHTML\n\t\t`<label for=\"${id}\" title=\"${title}\">\n\t\t\t${label}\n\t\t</label>\n\t\t<br>`\n}\n\n// Render drop down selection menu\nfunction renderMenu({id, list}: OptionSpec): string {\n\tconst [label, title] = lang.labels[id]\n\tlet html = `<select id=\"${id}\" title=\"${title}\">`\n\tfor (let item of list) {\n\t\thtml += parseHTML\n\t\t\t`<option value=\"${item}\">\n\t\t\t\t${lang.modes[item] || item}\n\t\t\t</option>`\n\t}\n\thtml += '</select>' + renderLabel(id, title, label)\n\treturn html\n}\n\n// Hidden post reset, Export and Import links to first tab\nfunction renderExtras(): string {\n\tlet html = '<br>'\n\tconst links = ['export', 'import', 'hidden']\n\tfor (let id of links) {\n\t\tconst [label, title] = lang.labels[id]\n\t\thtml += parseHTML\n\t\t\t`<a id=\"${id}\" title=\"${title}\">\n\t\t\t\t${label}\n\t\t\t</a> `\n\t}\n\n\t// Hidden file input for uploading the JSON\n\tconst attrs: ElementAttributes = {\n\t\ttype: 'file',\n\t\tid: 'importSettings',\n\t\tname: \"Import Settings\"\n\t}\n\thtml += `<input ${parseAttributes(attrs)}>`\n\n\treturn html\n}\n"],"sourceRoot":"/source/"}