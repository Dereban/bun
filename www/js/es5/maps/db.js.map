{"version":3,"sources":["db.js","db.ts"],"names":["System","register","exports_1","context_1","open","Promise","resolve","reject","r","indexedDB","dbVersion","onerror","error","onsuccess","db","result","err","onupgradeneeded","event","posts","createObjectStore","keyPath","add","id","setters","execute","IDBRequest","prototype","exec","_this","this"],"mappings":"AAAA,YAAAA,QAAOC,YAAa,SAASC,EAAWC,GCgBxC,QAAAC,KACC,MAAO,IAAIC,SAAc,SAACC,EAASC,GAClC,GAAMC,GAAIC,UAAUL,KAAK,SAAUM,EACnCF,GAAEG,QAAU,WDRE,MCSbJ,GAAOC,EAAEI,QACVJ,EAAEK,UAAY,WACbX,EAAA,KAAAY,EAAKN,EAAEO,QACPD,EAAGH,QAAU,SAAAK,GACZ,KAAMA,IAEPV,KAEDE,EAAES,gBAAkB,SAAAC,GACnB,GAAMJ,GAAKN,EAAEO,OAIPI,EAAQL,EAAGM,kBAAkB,SAAUC,QAAS,MAEtDF,GAAMG,KAAKC,GAAI,SACfJ,EAAMG,KAAKC,GAAI,WAIfT,EAAGM,kBAAkB,WAAYC,QAAS,OAG1CP,EAAGM,kBAAkB,UAAWC,QAAS,UDzCxC,GCEEX,GAEKI,CDJYX,IAAaA,EAAUoB,EAwB1C,OCVJrB,GAAA,OAAAE,IDWQoB,WACAC,QAAS,WCxBXf,EAAY,EAKlBgB,WAAWC,UAAUC,KAAO,WD2BZ,GAAIC,GAAQC,IC1B3B,OAAO,IAAIzB,SAAa,SAACC,EAASC,GACjCsB,EAAKlB,QAAU,WD6BO,MC7BDJ,GAAOsB,EAAKjB,QACjCiB,EAAKhB,UAAY,WD+BK,MC/BCP,GAAQuB,EAAKd","file":"db.js","sourcesContent":["System.register([], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var dbVersion, db;\n    function open() {\n        return new Promise((resolve, reject) => {\n            const r = indexedDB.open('meguca', dbVersion);\n            r.onerror = () => reject(r.error);\n            r.onsuccess = () => {\n                exports_1(\"db\", db = r.result);\n                db.onerror = err => {\n                    throw err;\n                };\n                resolve();\n            };\n            r.onupgradeneeded = event => {\n                const db = r.result;\n                const posts = db.createObjectStore('posts', { keyPath: 'id' });\n                posts.add({ id: 'mine' });\n                posts.add({ id: 'hidden' });\n                db.createObjectStore('threads', { keyPath: 'id' });\n                db.createObjectStore('boards', { keyPath: 'id' });\n            };\n        });\n    }\n    exports_1(\"open\", open);\n    return {\n        setters:[],\n        execute: function() {\n            dbVersion = 2;\n            IDBRequest.prototype.exec = function () {\n                return new Promise((resolve, reject) => {\n                    this.onerror = () => reject(this.error);\n                    this.onsuccess = () => resolve(this.result);\n                });\n            };\n        }\n    }\n});\n","/*\n IndexedDB database controller\n*/\n\nconst dbVersion = 2\n\nexport let db: IDBDatabase\n\n// Execute a database request as a promise\nIDBRequest.prototype.exec = function (): Promise<any> {\n\treturn new Promise<any>((resolve, reject) => {\n\t\tthis.onerror = () => reject(this.error)\n\t\tthis.onsuccess = () => resolve(this.result)\n\t})\n}\n\nexport function open(): Promise<void> {\n\treturn new Promise<void>((resolve, reject) => {\n\t\tconst r = indexedDB.open('meguca', dbVersion)\n\t\tr.onerror = () =>\n\t\t\treject(r.error)\n\t\tr.onsuccess = () => {\n\t\t\tdb = r.result\n\t\t\tdb.onerror = err => {\n\t\t\t\tthrow err\n\t\t\t}\n\t\t\tresolve()\n\t\t}\n\t\tr.onupgradeneeded = event => {\n\t\t\tconst db = r.result as IDBDatabase\n\n\t\t\t// Various post number sets, like posts the user has made, posts\n\t\t\t// that have qouted the user, posts that have been hidded, etc.\n\t\t\tconst posts = db.createObjectStore('posts', {keyPath: 'id'})\n\n\t\t\tposts.add({id: 'mine'}) // Posts this client has made\n\t\t\tposts.add({id: 'hidden'}) // Posts this client has hidden\n\n\t\t\t// Chache of thread models, so we don't have to store JSON and\n\t\t\t// reparse it, when restoring to a previous state\n\t\t\tdb.createObjectStore('threads', {keyPath: 'id'})\n\n\t\t\t// Same for boards\n\t\t\tdb.createObjectStore('boards', {keyPath: 'id'})\n\t\t}\n\t})\n}\n"],"sourceRoot":"/source/"}