{"version":3,"sources":["options.js","options.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","System","register","exports_1","context_1","model_1","specs_1","view_1","defer_1","options","models","id","setters","model_1_1","specs_1_1","view_1_1","defer_1_1","execute","localStorage","removeItem","OptionModel","spec","_this","this","noLoad","type","val","attrs","get","onChange","noExecOnStart","value","getItem","stored","read","num","parseInt","set","exec","setItem","toString","validation","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","specs","Symbol","iterator","next","done","err","defer"],"mappings":"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","file":"options.js","sourcesContent":["System.register(['./model', './options/specs', './options/view', './defer'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var model_1, specs_1, view_1, defer_1;\n    var options, models, OptionModel;\n    return {\n        setters:[\n            function (model_1_1) {\n                model_1 = model_1_1;\n            },\n            function (specs_1_1) {\n                specs_1 = specs_1_1;\n            },\n            function (view_1_1) {\n                view_1 = view_1_1;\n            },\n            function (defer_1_1) {\n                defer_1 = defer_1_1;\n            }],\n        execute: function() {\n            localStorage.removeItem(\"options\");\n            options = new model_1.default();\n            exports_1(\"default\",options);\n            exports_1(\"models\", models = {});\n            class OptionModel {\n                constructor(spec) {\n                    if (spec.noLoad) {\n                        return;\n                    }\n                    this.spec = spec;\n                    this.id = this.spec.id;\n                    if (!spec.type) {\n                        spec.type = 0;\n                    }\n                    const val = options.attrs[this.id] = this.get();\n                    options.onChange(this.id, val => this.onChange(val));\n                    if (!spec.noExecOnStart) {\n                        this.execute(val);\n                    }\n                    models[this.id] = this;\n                }\n                read() {\n                    return localStorage.getItem(this.id) || \"\";\n                }\n                get() {\n                    const stored = this.read();\n                    if (!stored) {\n                        return this.spec.default;\n                    }\n                    else {\n                        if (stored === 'false') {\n                            return false;\n                        }\n                        if (stored === \"true\") {\n                            return true;\n                        }\n                        const num = parseInt(stored, 10);\n                        if (num || num === 0) {\n                            return num;\n                        }\n                        return this.spec.default;\n                    }\n                }\n                onChange(val) {\n                    this.execute(val);\n                    this.set(val);\n                }\n                execute(val) {\n                    if (this.spec.exec) {\n                        this.spec.exec(val);\n                    }\n                }\n                set(val) {\n                    if (val !== this.spec.default || this.read()) {\n                        localStorage.setItem(this.id, val.toString());\n                    }\n                }\n                validate(val) {\n                    if (this.spec.validation) {\n                        return this.spec.validation(val);\n                    }\n                    return true;\n                }\n            }\n            for (let spec of specs_1.specs) {\n                new OptionModel(spec);\n            }\n            defer_1.defer(() => new view_1.default());\n        }\n    }\n});\n","/*\n User-set settings storage and change handling\n*/\n\nimport Model from './model'\nimport {extend} from 'underscore'\nimport {OptionSpec, specs, optionType, OptionValue} from './options/specs'\nimport OptionsPanel from './options/view'\nimport {defer} from './defer'\n\n// Delete legacy options localStorage entry, if any\nlocalStorage.removeItem(\"options\")\n\n// Central options storage model\nconst options = new Model()\nexport default options\n\n// All loaded option models\nexport const models: {[key: string]: OptionModel} = {}\n\n// Option model IDs\nexport type OptionID =\n\t'lang' | 'inlineFit' | 'thumbs' | 'imageHover' | 'webmHover' | 'autogif'\n\t| 'spoilers' | 'notification' | 'anonymise' | 'relativeTime' | 'nowPlaying'\n\t| 'illyaDance' | 'illyaDanceMute' | 'horizontalPosting' | 'replyRight'\n\t| 'theme' | 'userBG' | 'userBGImage' | 'lastN' | 'alwaysLock' | 'newPost'\n\t| 'toggleSpoiler' | 'textSpoiler' | 'done' | 'expandAll' |'workMode'\n\t| 'export' | 'import' | 'hidden' | 'workModeToggle' | 'google' | 'iqdb'\n\t| 'saucenao' | 'desustorage' | 'exhentai'\n\n// Controler for each individual option\nclass OptionModel {\n\tid: OptionID\n\tspec: OptionSpec\n\n\t// Create new option model from template spec\n\tconstructor(spec: OptionSpec) {\n\t\t// Condition for loading option. Optional.\n\t\tif (spec.noLoad) {\n\t\t\treturn\n\t\t}\n\t\tthis.spec = spec\n\t\tthis.id = this.spec.id\n\n\t\t// No type = checkbox + default false\n\t\tif (!spec.type) {\n\t\t\tspec.type = optionType.checkbox\n\t\t}\n\n\t\t// Store option value in central stotage options Model\n\t\tconst val = options.attrs[this.id] = this.get()\n\t\toptions.onChange(this.id, val =>\n\t\t\tthis.onChange(val))\n\t\tif (!spec.noExecOnStart) {\n\t\t\tthis.execute(val)\n\t\t}\n\t\tmodels[this.id] = this\n\t}\n\n\t// Read value from localStorage\n\tprivate read(): string {\n\t\treturn localStorage.getItem(this.id) || \"\"\n\t}\n\n\t// Retrieve option value from storage and parse result. If none, return\n\tget(): OptionValue {\n\t\tconst stored = this.read()\n\t\tif (!stored) {\n\t\t\treturn this.spec.default\n\t\t} else {\n\t\t\tif (stored === 'false') {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif (stored === \"true\") {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tconst num = parseInt(stored, 10)\n\t\t\tif (num || num === 0) {\n\t\t\t\treturn num\n\t\t\t}\n\t\t\treturn this.spec.default\n\t\t}\n\t}\n\n\t// Handler to be executed on field change in central options storage model\n\tprivate onChange(val: OptionValue) {\n\t\tthis.execute(val)\n\t\tthis.set(val)\n\t}\n\n\t// Execute handler function, if any\n\tprivate execute(val: OptionValue) {\n\t\tif (this.spec.exec) {\n\t\t\tthis.spec.exec(val)\n\t\t}\n\t}\n\n\t// Write value to localStorage, if needed\n\tset(val: OptionValue) {\n\t\tif (val !== this.spec.default || this.read()) {\n\t\t\tlocalStorage.setItem(this.id, val.toString())\n\t\t}\n\t}\n\n\t// Perform value validation, if any. Othervise return true.\n\tvalidate(val: OptionValue): boolean {\n\t\tif (this.spec.validation) {\n\t\t\treturn this.spec.validation(val)\n\t\t}\n\t\treturn true\n\t}\n}\n\n// Populate option model collection and central model\nfor (let spec of specs) {\n\tnew OptionModel(spec)\n}\n\ndefer(() => new OptionsPanel())\n"],"sourceRoot":"/source/"}