{"version":3,"sources":["posts/render/header.js","posts/render/header.ts"],"names":["_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","_templateObject","_templateObject2","System","register","exports_1","context_1","renderHeader","data","id","subject","op","postURL","renderPostURL","util_1","parseHTML","underscore_1","escape","renderName","renderTime","time","toString","html","auth","email","attrs","class","href","encodeURI","target","parseAttributes","resolveName","trip","name","lang_1","posts","anon","alias","undefined","state_1","config","staff","classes","title","text","readable","readableTime","options_1","get","relativeTime","Date","now","d","pad","getDate","year","getMonth","getFullYear","week","getDay","getHours","getMinutes","then","Math","floor","isFuture","justNow","divide","unit","i","length","ago","units","setters","underscore_1_1","util_1_1","state_1_1","options_1_1","lang_1_1","execute"],"mappings":"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","file":"posts/render/header.js","sourcesContent":["System.register(['underscore', '../../util', '../../state', '../../options', '../../lang'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var underscore_1, util_1, state_1, options_1, lang_1;\n    function renderHeader(data) {\n        const { id, op, subject } = data, postURL = renderPostURL(id);\n        return util_1.parseHTML `<header>\n\t\t\t<input type=\"checkbox\" class=\"postCheckbox\">\n\t\t\t${subject ? `<h3>「${underscore_1.escape(data.subject)}」</h3>` : ''}\n\t\t\t${renderName(data)}\n\t\t\t${renderTime(data.time)}\n\t\t\t<nav>\n\t\t\t\t<a href=\"${postURL}\" class=\"history\">\n\t\t\t\t\tNo.\n\t\t\t\t</a>\n\t\t\t\t<a href=\"${postURL}\" class=\"quote\">\n\t\t\t\t\t${id.toString()}\n\t\t\t\t</a>\n\t\t\t</nav>\n\t\t</header>\n\t\t<span class=\"oi control\" data-glyph=\"chevron-bottom\"></span>`;\n    }\n    exports_1(\"renderHeader\", renderHeader);\n    function renderName(data) {\n        let html = '<b class=\"name';\n        const { auth, email } = data;\n        if (auth) {\n            html += ` ${auth === 'admin' ? 'admin' : 'moderator'}`;\n        }\n        html += '\">';\n        if (email) {\n            const attrs = {\n                class: 'email',\n                href: 'mailto:' + encodeURI(email),\n                target: 'blank'\n            };\n            html += `<a ${util_1.parseAttributes(attrs)}>`;\n        }\n        html += resolveName(data);\n        if (email) {\n            html += '</a>';\n        }\n        html += '</b>';\n        return html;\n    }\n    exports_1(\"renderName\", renderName);\n    function resolveName(data) {\n        let html = '';\n        const { trip, name, auth } = data;\n        if (name || !trip) {\n            if (name) {\n                html += underscore_1.escape(name);\n            }\n            else {\n                html += lang_1.posts.anon;\n            }\n            if (trip) {\n                html += ' ';\n            }\n        }\n        if (trip) {\n            html += `<code>${underscore_1.escape(trip)}</code>`;\n        }\n        if (auth) {\n            let alias;\n            if (auth in state_1.config.staff.classes) {\n                alias = state_1.config.staff.classes[auth].alias;\n            }\n            else {\n                alias = auth;\n            }\n            html += ` ## ${alias}`;\n        }\n        return html;\n    }\n    function renderTime(time) {\n        let title, text;\n        const readable = readableTime(time);\n        if (options_1.default.get('relativeTime')) {\n            title = readable;\n            text = relativeTime(time, Date.now());\n        }\n        return util_1.parseHTML `<time title=\"${title}\">\n\t\t\t${text || readable}\n\t\t</time>`;\n    }\n    exports_1(\"renderTime\", renderTime);\n    function readableTime(time) {\n        let d = new Date(time);\n        return util_1.pad(d.getDate()) + ' '\n            + lang_1.time.year[d.getMonth()] + ' '\n            + d.getFullYear()\n            + `(${lang_1.time.week[d.getDay()]})`\n            + `${util_1.pad(d.getHours())}:${util_1.pad(d.getMinutes())}`;\n    }\n    function relativeTime(then, now) {\n        let time = Math.floor((now - then) / 60000), isFuture = false;\n        if (time < 1) {\n            if (time > -5) {\n                return lang_1.time.justNow;\n            }\n            else {\n                isFuture = true;\n                time = -time;\n            }\n        }\n        const divide = [60, 24, 30, 12], unit = ['minute', 'hour', 'day', 'month'];\n        for (let i = 0; i < divide.length; i++) {\n            if (time < divide[i]) {\n                return ago(time, lang_1.time[unit[i]], isFuture);\n            }\n            time = Math.floor(time / divide[i]);\n        }\n        return ago(time, lang_1.time.year, isFuture);\n    }\n    function ago(time, units, isFuture) {\n        let text = units[time > 1 ? 1 : 0];\n        if (isFuture) {\n            text += `${lang_1.time.in} ${text}`;\n        }\n        else {\n            text += ` ${lang_1.time.ago}`;\n        }\n        return text;\n    }\n    function renderPostURL(id) {\n        return `#p${id}`;\n    }\n    exports_1(\"renderPostURL\", renderPostURL);\n    return {\n        setters:[\n            function (underscore_1_1) {\n                underscore_1 = underscore_1_1;\n            },\n            function (util_1_1) {\n                util_1 = util_1_1;\n            },\n            function (state_1_1) {\n                state_1 = state_1_1;\n            },\n            function (options_1_1) {\n                options_1 = options_1_1;\n            },\n            function (lang_1_1) {\n                lang_1 = lang_1_1;\n            }],\n        execute: function() {\n        }\n    }\n});\n","import {escape} from 'underscore'\nimport {parseHTML, parseAttributes, pad, ElementAttributes} from '../../util'\nimport {config} from '../../state'\nimport options from '../../options'\nimport {PostData} from '../models'\nimport {posts as lang, time as timeLang} from '../../lang'\n\n// Render the header with various post informationt\nexport function renderHeader(data: PostData): string {\n\tconst {id, op, subject} = data,\n\t\tpostURL = renderPostURL(id)\n\treturn parseHTML\n\t\t`<header>\n\t\t\t<input type=\"checkbox\" class=\"postCheckbox\">\n\t\t\t${subject ? `<h3>「${escape(data.subject)}」</h3>` : ''}\n\t\t\t${renderName(data)}\n\t\t\t${renderTime(data.time)}\n\t\t\t<nav>\n\t\t\t\t<a href=\"${postURL}\" class=\"history\">\n\t\t\t\t\tNo.\n\t\t\t\t</a>\n\t\t\t\t<a href=\"${postURL}\" class=\"quote\">\n\t\t\t\t\t${id.toString()}\n\t\t\t\t</a>\n\t\t\t</nav>\n\t\t</header>\n\t\t<span class=\"oi control\" data-glyph=\"chevron-bottom\"></span>`\n}\n\n// Render the name of a post's poster\nexport function renderName(data: PostData): string {\n\tlet html = '<b class=\"name'\n\tconst {auth, email} = data\n\tif (auth) {\n\t\thtml += ` ${auth === 'admin' ? 'admin' : 'moderator'}`\n\t}\n\thtml += '\">'\n\tif (email) {\n\t\tconst attrs: ElementAttributes = {\n\t\t\tclass: 'email',\n\t\t\thref: 'mailto:' + encodeURI(email),\n\t\t\ttarget: 'blank'\n\t\t}\n\t\thtml += `<a ${parseAttributes(attrs)}>`\n\t}\n\thtml += resolveName(data)\n\tif (email) {\n\t\thtml += '</a>'\n\t}\n\thtml += '</b>'\n\treturn html\n}\n\n// Determine the name and tripcode combination to render\nfunction resolveName(data: PostData): string {\n\tlet html = ''\n\tconst {trip, name, auth} = data\n\tif (name || !trip) {\n\t\tif (name) {\n\t\t\thtml += escape(name)\n\t\t} else {\n\t\t\thtml += lang.anon\n\t\t}\n\t\tif (trip) {\n\t\t\thtml += ' '\n\t\t}\n\t}\n\tif (trip) {\n\t\thtml += `<code>${escape(trip)}</code>`\n\t}\n\tif (auth) { // Render staff title\n\t\tlet alias: string\n\t\tif (auth in config.staff.classes) {\n\t\t\talias = config.staff.classes[auth].alias\n\t\t} else {\n\t\t\talias = auth\n\t\t}\n\t\thtml += ` ## ${alias}`\n\t}\n\treturn html\n}\n\n// TODO: Resolve, once moderation implemented\n// // Renders a poster identification mnemonic\n// export function renderMnemonic(mnemonic) {\n// \treturn `<b class=\"mod addr\">${mnem}</b>`\n// }\n\n// Renders a time element. Can be either absolute or relative.\nexport function renderTime(time: number): string {\n\t// Format according to client's relative post timestamp setting\n\tlet title: string,\n\t\ttext :string\n\tconst readable = readableTime(time)\n\tif (options.get('relativeTime')) {\n\t\ttitle = readable\n\t\ttext = relativeTime(time, Date.now())\n\t}\n\treturn parseHTML\n\t\t`<time title=\"${title}\">\n\t\t\t${text || readable}\n\t\t</time>`\n}\n\n// Renders classic absolute timestamp\nfunction readableTime(time: number): string {\n\tlet d = new Date(time)\n\treturn pad(d.getDate()) + ' '\n\t\t+ timeLang.year[d.getMonth()] + ' '\n\t\t+ d.getFullYear()\n\t\t+ `(${timeLang.week[d.getDay()]})`\n\t\t+`${pad(d.getHours())}:${pad(d.getMinutes())}`\n}\n\n// Renders readable elapsed time since post\nfunction relativeTime(then: number, now: number): string {\n\tlet time = Math.floor((now - then) / 60000),\n\t\tisFuture = false\n\tif (time < 1) {\n\t\tif (time > -5) { // Assume to be client clock imprecission\n\t\t\treturn timeLang.justNow\n\t\t}\n\t\telse {\n\t\t\tisFuture = true\n\t\t\ttime = -time\n\t\t}\n\t}\n\n\tconst divide = [60, 24, 30, 12],\n\t\tunit = ['minute', 'hour', 'day', 'month']\n\tfor (let i = 0; i < divide.length; i++) {\n\t\tif (time < divide[i]) {\n\t\t\treturn ago(time, timeLang[unit[i]] as string[], isFuture)\n\t\t}\n\t\ttime = Math.floor(time / divide[i])\n\t}\n\n\treturn ago(time, timeLang.year, isFuture)\n}\n\n// Renders \"56 minutes ago\" or \"in 56 minutes\" like relative time text\nfunction ago(time: number, units: string[], isFuture: boolean): string {\n\tlet text = units[time > 1 ? 1 : 0]\n\tif (isFuture) {\n\t\ttext += `${timeLang.in} ${text}`\n\t} else {\n\t\ttext += ` ${timeLang.ago}`\n\t}\n\treturn text\n}\n\n// Render an anchor that points to the target post number\nexport function renderPostURL(id: number): string {\n\treturn `#p${id}`\n}\n"],"sourceRoot":"/source/"}