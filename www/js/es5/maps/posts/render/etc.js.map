{"version":3,"sources":["posts/render/etc.js","posts/render/etc.ts"],"names":["_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties","value","_templateObject","System","register","exports_1","context_1","renderPostLink","num","board","op","text","state_1","page","get","mine","has","lang_1","posts","you","thread","OP","postAnchor","href","util_1","parseHTML","renderBacklinks","links","html","id","_links$id","parseInt","setters","state_1_1","lang_1_1","util_1_1","execute"],"mappings":"AAAA,YAIA,SAASA,wBAAuBC,EAASC,GAAO,MAAOC,QAAOC,OAAOD,OAAOE,iBAAiBJ,GAAWC,KAAOI,MAAOH,OAAOC,OAAOF,OAFpI,GAAIK,iBAAkBP,wBAAwB,4BAA6B,UAAc,aAAgB,4BAA6B,UAAc,YAFpJQ,QAAOC,UAAU,cAAe,aAAc,cAAe,SAASC,EAAWC,GCUjF,QAAAC,GAA+BC,EAAaC,EAAeC,GAC1D,GAAIC,GAAO,IACPF,KAAUG,EAAAC,KAAKC,IAAI,WACtBH,GAAI,KAASF,EAAK,KAEnBE,GAAQH,EACJI,EAAAG,KAAKC,IAAIR,KACZG,GAAQ,IAAMM,EAAAC,MAAKC,IAEpB,IAAMC,GAASR,EAAAC,KAAKC,IAAI,SAMxB,OALIJ,KAAOU,EACVT,GAAQ,KACEH,GAAOY,IACjBT,GAAQ,IAAMM,EAAAC,MAAKG,IAEbC,EAAU,IAAKb,EAAK,IAAIC,EAAE,IAAIF,EAAOG,GAI7C,QAAAW,GAAoBC,EAAcZ,GACjC,MAAOa,GAAAC,UAASvB,gBACaqB,EACzBZ,GAsBL,QAAAe,GAAgCC,GAC/B,IAAKA,EACJ,MAAO,EAER,IAAIC,GAAO,EACX,KAAK,GAAIC,KAAMF,GAAO,CDrBX,GAAIG,GCsBMH,EAAME,GAAnBpB,EAAKqB,EAALrB,MAAOC,EAAEoB,EAAFpB,EACVkB,KACHA,GAAQ,KAETA,GAAQrB,EAAewB,SAASF,GAAKpB,EAAOC,GAE7C,MAAOkB,GDhEJ,GACIhB,GAASK,EAAQO,CADFlB,IAAaA,EAAUuB,EAyC1C,OCjCJxB,GAAA,iBAAAE,GA4CAF,EAAA,kBAAAqB,IDVQM,SACI,SAAUC,GACNrB,EAAUqB,GAEd,SAAUC,GACNjB,EAASiB,GAEb,SAAUC,GACNX,EAASW,IAEjBC,QAAS","file":"posts/render/etc.js","sourcesContent":["System.register(['../../state', '../../lang', '../../util'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var state_1, lang_1, util_1;\n    function renderPostLink(num, board, op) {\n        let text = '>>';\n        if (board !== state_1.page.get('board')) {\n            text += `>/${board}/`;\n        }\n        text += num;\n        if (state_1.mine.has(num)) {\n            text += ' ' + lang_1.posts.you;\n        }\n        const thread = state_1.page.get('thread');\n        if (op !== thread) {\n            text += ' \\u27a1';\n        }\n        else if (num == thread) {\n            text += ' ' + lang_1.posts.OP;\n        }\n        return postAnchor(`/${board}/${op}#${num}`, text);\n    }\n    exports_1(\"renderPostLink\", renderPostLink);\n    function postAnchor(href, text) {\n        return util_1.parseHTML `<a class=\"history\" href=\"${href}\">\n\t\t\t${text}\n\t\t</a>`;\n    }\n    function renderBacklinks(links) {\n        if (!links) {\n            return '';\n        }\n        let html = '';\n        for (let id in links) {\n            const { board, op } = links[id];\n            if (html) {\n                html += ' ';\n            }\n            html += renderPostLink(parseInt(id), board, op);\n        }\n        return html;\n    }\n    exports_1(\"renderBacklinks\", renderBacklinks);\n    return {\n        setters:[\n            function (state_1_1) {\n                state_1 = state_1_1;\n            },\n            function (lang_1_1) {\n                lang_1 = lang_1_1;\n            },\n            function (util_1_1) {\n                util_1 = util_1_1;\n            }],\n        execute: function() {\n        }\n    }\n});\n","/*\n Miscalleneous post component rendering functions\n*/\n\nimport {page, mine} from '../../state'\nimport {posts as lang} from '../../lang'\nimport {parseHTML} from '../../util'\nimport {PostLinks} from '../models'\n\n// Render a link to other posts\nexport function renderPostLink(num: number, board: string, op: number): string {\n\tlet text = '>>'\n\tif (board !== page.get('board')) { // Cross-board\n\t\ttext += `>/${board}/`\n\t}\n\ttext += num\n\tif (mine.has(num)) { // Post, I made\n\t\ttext += ' ' + lang.you\n\t}\n\tconst thread = page.get('thread')\n\tif (op !== thread) { // Cross-thread\n\t\ttext += ' \\u27a1'\n\t} else if (num == thread) { // OP post of this thread\n\t\ttext += ' ' + lang.OP\n\t}\n\treturn postAnchor(`/${board}/${op}#${num}`, text)\n}\n\n// Render the anchor element of a post link\nfunction postAnchor(href: string, text: string): string {\n\treturn parseHTML\n\t\t`<a class=\"history\" href=\"${href}\">\n\t\t\t${text}\n\t\t</a>`\n}\n\n// TODO: Reimplement, when moderation done\n\n// Render USER WAS BANNED FOR THIS POST message, or similar\n// export function renerBanned(): string {\n// \treturn `<b class=\"admin banMessage\">${lang.mod.banMessage}</b>`\n// }\n//\n// Render moderation information. Only exposed to authenticated staff.\n// export function renderModInfo(info) {\n// \tlet html = '<b class=\"modLog admin\">'\n// \tfor (let action of info) {\n// \t\thtml += `${lang.mod.formatLog(action)}<br>`\n// \t}\n// \thtml += '</b>'\n// \treturn html\n// }\n\n// Render links to posts that are linking to the target post\nexport function renderBacklinks(links: PostLinks): string {\n\tif (!links) {\n\t\treturn ''\n\t}\n\tlet html = ''\n\tfor (let id in links) {\n\t\tconst {board, op} = links[id]\n\t\tif (html) {\n\t\t\thtml += ' '\n\t\t}\n\t\thtml += renderPostLink(parseInt(id), board, op)\n\t}\n\treturn html\n}\n"],"sourceRoot":"/source/"}