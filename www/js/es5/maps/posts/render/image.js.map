{"version":3,"sources":["posts/render/image.js","posts/render/image.ts"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_taggedTemplateLiteral","strings","raw","freeze","defineProperties","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","length","err","Array","isArray","TypeError","_templateObject","_templateObject2","_templateObject3","_templateObject4","_templateObject5","_templateObject6","System","register","exports_1","context_1","renderImage","data","reveal","showThumb","options_1","get","util_1","parseHTML","renderFigcaption","state_1","config","images","hats","renderThumbnail","list","commaList","audio","toString","readableFilesize","size","dims","apng","hiddenToggle","imageSearch","imageLink","Math","round","text","slice","lang_1","html","fileType","searchTemplates","engine","thumbPath","mid","type","ext","imagePaths","file","sourcePath","_ref","sourceExtension","_extensions","extensions","name","imgnm","m","match","fullName","underscore_1","escape","tooLong","attrs","href","rel","download","parseAttributes","src","thumb","_data$dims","thumbWidth","thumbHeight","spoiler","linkAttrs","target","imgAttrs","width","height","id","setters","state_1_1","underscore_1_1","options_1_1","util_1_1","lang_1_1","execute","spoil","models","url","symbol","templates","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","_step$value","class","_iterator"],"mappings":"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","file":"posts/render/image.js","sourcesContent":["System.register(['../../state', 'underscore', '../../options', '../../util', '../../lang'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var state_1, underscore_1, options_1, util_1, lang_1;\n    var imagePaths, searchTemplates;\n    function renderImage(data, reveal) {\n        const showThumb = options_1.default.get(\"thumbs\") !== 'hide' || reveal;\n        return util_1.parseHTML `<figure>\n\t\t\t${renderFigcaption(data, reveal)}\n\t\t\t${state_1.config.images.hats && showThumb ? '<span class=\"hat\"></span>' : ''}\n\t\t\t${showThumb ? renderThumbnail(data) : ''}\n\t\t</figure>`;\n    }\n    exports_1(\"renderImage\", renderImage);\n    function renderFigcaption(data, reveal) {\n        const list = util_1.commaList([\n            data.audio ? '\\u266B' : '',\n            data.length.toString(),\n            readableFilesize(data.size),\n            `${data.dims[0]}x${data.dims[1]}`,\n            data.apng ? 'APNG' : ''\n        ]);\n        return util_1.parseHTML `<figcaption>\n\t\t\t${hiddenToggle(reveal)}\n\t\t\t${imageSearch(data)}\n\t\t\t<span>\n\t\t\t\t(${list})\n\t\t\t</span>\n\t\t\t${imageLink(data)}\n\t\t</figcaption>`;\n    }\n    exports_1(\"renderFigcaption\", renderFigcaption);\n    function readableFilesize(size) {\n        if (size < 1024) {\n            return size + ' B';\n        }\n        if (size < 1048576) {\n            return Math.round(size / 1024) + ' KB';\n        }\n        const text = Math.round(size / 104857.6).toString();\n        return `${text.slice(0, -1)}.${text.slice(-1)} MB`;\n    }\n    function hiddenToggle(reveal) {\n        if (options_1.default.get('thumbs') !== 'hide') {\n            return '';\n        }\n        return util_1.parseHTML `<a class=\"imageToggle\">\n\t\t\t[${lang_1.images[reveal ? 'hide' : 'show']}]\n\t\t</a>`;\n    }\n    function imageSearch(data) {\n        let html = '';\n        if (data.fileType === 4) {\n            if (options_1.default.get(\"google\")) {\n                return searchTemplates['google'](data);\n            }\n            return '';\n        }\n        for (let engine in searchTemplates) {\n            html += searchTemplates[engine](data);\n        }\n        return html;\n    }\n    function thumbPath(data, mid) {\n        const type = mid ? 'mid' : 'thumb';\n        let ext;\n        switch (data.fileType) {\n            case 6:\n            case 0:\n                ext = '.jpg';\n                break;\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n            case 7:\n            case 8:\n                ext = '.png';\n                break;\n        }\n        return imagePaths[type] + data.file + ext;\n    }\n    function sourcePath({ file, fileType }) {\n        return imagePaths['src'] + file + sourceExtension(fileType);\n    }\n    function sourceExtension(fileType) {\n        const extensions = {\n            [0]: '.jpg',\n            [1]: '.png',\n            [2]: '.gif',\n            [3]: '.webm',\n            [4]: '.pdf',\n            [5]: '.svg',\n            [6]: '.mp4',\n            [7]: '.mp3',\n            [8]: '.ogg'\n        };\n        return extensions[fileType];\n    }\n    function imageLink(data) {\n        let name = '', { file, fileType, imgnm } = data;\n        const m = imgnm.match(/^(.*)\\.\\w{3,4}$/);\n        if (m) {\n            name = m[1];\n        }\n        const fullName = underscore_1.escape(imgnm), tooLong = name.length >= 38;\n        if (tooLong) {\n            imgnm = underscore_1.escape(name.slice(0, 30))\n                + '(&hellip;)'\n                + underscore_1.escape(sourceExtension(fileType));\n        }\n        const attrs = {\n            href: sourcePath(data),\n            rel: 'nofollow',\n            download: fullName\n        };\n        if (tooLong) {\n            attrs['title'] = fullName;\n        }\n        return util_1.parseHTML `<a ${util_1.parseAttributes(attrs)}>\n\t\t\t${imgnm}\n\t\t</a>`;\n    }\n    function renderHat(showThumb) {\n        if (showThumb && state_1.config.images.hats) {\n            return '<span class=\"hat\"></span>';\n        }\n        return '';\n    }\n    function renderThumbnail(data, href) {\n        const src = sourcePath(data);\n        let thumb, [width, height, thumbWidth, thumbHeight] = data.dims;\n        if (data.spoiler && options_1.default.get('spoilers')) {\n            thumb = imagePaths['spoil'] + data.spoiler + '.jpg';\n            thumbWidth = thumbHeight = 250;\n        }\n        else if (data.fileType === 2 && options_1.default.get('autogif')) {\n            thumb = src;\n        }\n        else {\n            thumb = thumbPath(data, options_1.default.get('thumbs') !== 'small');\n        }\n        const linkAttrs = {\n            target: '_blank',\n            rel: 'nofollow',\n            href: href || src\n        };\n        const imgAttrs = {\n            src: thumb,\n            width: thumbWidth.toString(),\n            height: thumbHeight.toString()\n        };\n        if (href) {\n            linkAttrs['class'] = 'history';\n            imgAttrs['class'] = 'expanded';\n            if (options_1.default.get('thumbs') === 'hide') {\n                imgAttrs['style'] = 'display: none';\n            }\n        }\n        return util_1.parseHTML `<a ${util_1.parseAttributes(linkAttrs)}>\n\t\t\t<img ${util_1.parseAttributes(imgAttrs)}>\n\t\t</a>`;\n    }\n    exports_1(\"renderThumbnail\", renderThumbnail);\n    return {\n        setters:[\n            function (state_1_1) {\n                state_1 = state_1_1;\n            },\n            function (underscore_1_1) {\n                underscore_1 = underscore_1_1;\n            },\n            function (options_1_1) {\n                options_1 = options_1_1;\n            },\n            function (util_1_1) {\n                util_1 = util_1_1;\n            },\n            function (lang_1_1) {\n                lang_1 = lang_1_1;\n            }],\n        execute: function() {\n            imagePaths = {\n                src: '/img/src/',\n                thumb: '/img/thumb/',\n                mid: '/img/mid/',\n                spoil: '/ass/spoil/spoiler'\n            };\n            searchTemplates = (function () {\n                const models = [\n                    {\n                        engine: 'google',\n                        url: 'https://www.google.com/searchbyimage?image_url=',\n                        type: 'thumb',\n                        symbol: 'G'\n                    },\n                    {\n                        engine: 'iqdb',\n                        url: 'http://iqdb.org/?url=',\n                        type: 'thumb',\n                        symbol: 'Iq'\n                    },\n                    {\n                        engine: 'saucenao',\n                        url: 'http://saucenao.com/search.php?db=999&url=',\n                        type: 'thumb',\n                        symbol: 'Sn'\n                    },\n                    {\n                        engine: 'desustorage',\n                        type: 'MD5',\n                        url: 'https://desustorage.org/_/search/image/',\n                        symbol: 'Ds'\n                    },\n                    {\n                        engine: 'exhentai',\n                        type: 'SHA1',\n                        url: 'http://exhentai.org/?fs_similar=1&fs_exp=1&f_shash=',\n                        symbol: 'Ex'\n                    }\n                ];\n                const templates = {};\n                for (let { engine, url, type, symbol } of models) {\n                    const attrs = {\n                        target: '_blank',\n                        rel: 'nofollow',\n                        class: 'imageSearch ' + engine\n                    };\n                    templates[engine] = data => {\n                        if (!options_1.default.get(engine)) {\n                            return '';\n                        }\n                        attrs['href'] = url\n                            + (type === 'thumb' ? thumbPath(data, false) : data[type]);\n                        return util_1.parseHTML `<a ${util_1.parseAttributes(attrs)}>\n\t\t\t\t\t${symbol}\n\t\t\t\t</a>`;\n                    };\n                }\n                return templates;\n            })();\n        }\n    }\n});\n","/*\n Image thumbnail HTML rendering\n*/\n\nimport {config} from '../../state'\nimport {escape} from 'underscore'\nimport options from '../../options'\nimport {\n\tparseHTML, commaList, parseAttributes, ElementAttributes\n} from '../../util'\nimport {ImageData, fileTypes} from '../models'\nimport {images as lang} from '../../lang'\n\n// Render a thumbnail of an image, according to configuration settings\nexport function renderImage(data: ImageData, reveal?: boolean): string {\n\tconst showThumb = options.get(\"thumbs\") !== 'hide' || reveal\n\treturn parseHTML\n\t\t`<figure>\n\t\t\t${renderFigcaption(data, reveal)}\n\t\t\t${config.images.hats && showThumb ? '<span class=\"hat\"></span>': ''}\n\t\t\t${showThumb ? renderThumbnail(data) : ''}\n\t\t</figure>`\n}\n\n// Render the information caption above the image\nexport function renderFigcaption(data: ImageData, reveal: boolean): string {\n\tconst list = commaList([\n\t\tdata.audio ? '\\u266B' : '',\n\t\tdata.length.toString(),\n\t\treadableFilesize(data.size),\n\t\t`${data.dims[0]}x${data.dims[1]}`,\n\t\tdata.apng ? 'APNG' : ''\n\t])\n\treturn parseHTML\n\t\t`<figcaption>\n\t\t\t${hiddenToggle(reveal)}\n\t\t\t${imageSearch(data)}\n\t\t\t<span>\n\t\t\t\t(${list})\n\t\t\t</span>\n\t\t\t${imageLink(data)}\n\t\t</figcaption>`\n}\n\n// Renders a human readable file size string\nfunction readableFilesize(size: number): string {\n\tif (size < 1024) {\n\t\treturn size + ' B'\n\t}\n\tif (size < 1048576) {\n\t\treturn Math.round(size / 1024) + ' KB'\n\t}\n\tconst text = Math.round(size / 104857.6).toString()\n\treturn `${text.slice(0, -1)}.${text.slice(-1)} MB`\n}\n\n// Render the button for toggling hidden thumbnails\nfunction hiddenToggle(reveal: boolean): string {\n\tif (options.get('thumbs') !== 'hide') {\n\t\treturn ''\n\t}\n\treturn parseHTML\n\t\t`<a class=\"imageToggle\">\n\t\t\t[${lang[reveal ? 'hide' : 'show']}]\n\t\t</a>`\n}\n\n// Base URLs of image addresses\nconst imagePaths: {[type: string]: string} = {\n\tsrc: '/img/src/',\n\tthumb: '/img/thumb/',\n\tmid: '/img/mid/',\n\tspoil: '/ass/spoil/spoiler'\n}\n\ntype ISTemplate = (data: ImageData) => string\n\n// Generate template functions for each image search engine\nconst searchTemplates = (function() {\n\tconst models = [\n\t\t{\n\t\t\tengine: 'google',\n\t\t\turl: 'https://www.google.com/searchbyimage?image_url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'G'\n\t\t},\n\t\t{\n\t\t\tengine: 'iqdb',\n\t\t\turl: 'http://iqdb.org/?url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'Iq'\n\t\t},\n\t\t{\n\t\t\tengine: 'saucenao',\n\t\t\turl: 'http://saucenao.com/search.php?db=999&url=',\n\t\t\ttype: 'thumb',\n\t\t\tsymbol: 'Sn'\n\t\t},\n\t\t{\n\t\t\tengine: 'desustorage',\n\t\t\ttype: 'MD5',\n\t\t\turl: 'https://desustorage.org/_/search/image/',\n\t\t\tsymbol: 'Ds'\n\t\t},\n\t\t{\n\t\t\tengine: 'exhentai',\n\t\t\ttype: 'SHA1',\n\t\t\turl: 'http://exhentai.org/?fs_similar=1&fs_exp=1&f_shash=',\n\t\t\tsymbol: 'Ex'\n\t\t}\n\t]\n\n\tconst templates: {[engine: string]: ISTemplate} = {}\n\tfor (let {engine, url, type, symbol} of models) {\n\t\tconst attrs: ElementAttributes = {\n\t\t\ttarget: '_blank',\n\t\t\trel: 'nofollow',\n\t\t\tclass: 'imageSearch ' + engine\n\t\t}\n\t\ttemplates[engine] = data => {\n\t\t\tif (!options.get(engine)) {\n\t\t\t\treturn ''\n\t\t\t}\n\t\t\tattrs['href'] = url\n\t\t\t\t+ (type === 'thumb' ? thumbPath(data, false) : data[type])\n\t\t\treturn parseHTML\n\t\t\t\t`<a ${parseAttributes(attrs)}>\n\t\t\t\t\t${symbol}\n\t\t\t\t</a>`\n\t\t}\n\t}\n\n\treturn templates\n})()\n\n// Render image search links in accordance to client settings\nfunction imageSearch(data: ImageData): string {\n\tlet html = ''\n\n\t// Only render google for PDFs\n\tif (data.fileType === fileTypes.pdf) {\n\t\tif (options.get(\"google\")) {\n\t\t\treturn searchTemplates['google'](data)\n\t\t}\n\t\treturn ''\n\t}\n\tfor (let engine in searchTemplates) {\n\t\thtml += searchTemplates[engine](data)\n\t}\n\treturn html\n}\n\n// Get the thumbnail path of an image, accounting for not thumbnail of specific\n// type being present\nfunction thumbPath(data: ImageData, mid: boolean): string {\n\tconst type = mid ? 'mid' : 'thumb'\n\tlet ext: string\n\tswitch (data.fileType) {\n\tcase fileTypes.mp4:\n\tcase fileTypes.jpeg:\n\t\text = '.jpg'\n\t\tbreak\n\tcase fileTypes.png:\n\tcase fileTypes.gif:\n\tcase fileTypes.webm:\n\tcase fileTypes.pdf:\n\tcase fileTypes.mp3:\n\tcase fileTypes.ogg:\n\t\text = '.png'\n\t\tbreak\n\t}\n\treturn imagePaths[type] + data.file + ext\n}\n\n// Resolve the path to the source file of an upload\nfunction sourcePath({file, fileType}: ImageData): string {\n\treturn imagePaths['src'] + file + sourceExtension(fileType)\n}\n\n// Resolve the extension of the source file\nfunction sourceExtension(fileType: fileTypes): string {\n\tconst extensions: {[type: number]: string} = {\n\t\t[fileTypes.jpeg]: '.jpg',\n\t\t[fileTypes.png]: '.png',\n\t\t[fileTypes.gif]: '.gif',\n\t\t[fileTypes.webm]: '.webm',\n\t\t[fileTypes.pdf]: '.pdf',\n\t\t[fileTypes.svg]: '.svg',\n\t\t[fileTypes.mp4]: '.mp4',\n\t\t[fileTypes.mp3]: '.mp3',\n\t\t[fileTypes.ogg]: '.ogg'\n\t}\n\treturn extensions[fileType]\n}\n\n// Render a name + download link of an image\nfunction imageLink(data: ImageData): string {\n\tlet name = '',\n\t\t{file, fileType, imgnm} = data\n\tconst m = imgnm.match(/^(.*)\\.\\w{3,4}$/)\n\tif (m) {\n\t\tname = m[1]\n\t}\n\tconst fullName = escape(imgnm),\n\t\ttooLong = name.length >= 38\n\tif (tooLong) {\n\t\timgnm = escape(name.slice(0, 30))\n\t\t\t+ '(&hellip;)'\n\t\t\t+ escape(sourceExtension(fileType))\n\t}\n\tconst attrs: ElementAttributes = {\n\t\thref: sourcePath(data),\n\t\trel: 'nofollow',\n\t\tdownload: fullName\n\t}\n\tif (tooLong) {\n\t\tattrs['title'] = fullName\n\t}\n\treturn parseHTML\n\t\t`<a ${parseAttributes(attrs)}>\n\t\t\t${imgnm}\n\t\t</a>`\n}\n\n// Render a hat on top of the thumbnail, if enabled\nfunction renderHat(showThumb: boolean): string {\n\tif (showThumb && config.images.hats) {\n\t\treturn '<span class=\"hat\"></span>'\n\t}\n\treturn ''\n}\n\n// Render the actual thumbnail image\nexport function renderThumbnail(data: ImageData, href?: string): string {\n\tconst src = sourcePath(data)\n\tlet thumb: string,\n\t\t[width, height, thumbWidth, thumbHeight] = data.dims\n\n\tif (data.spoiler && options.get('spoilers')) {\n\t\t// Spoilered and spoilers enabled\n\t\tthumb = imagePaths['spoil'] + data.spoiler + '.jpg'\n\t\tthumbWidth = thumbHeight = 250\n\t} else if (data.fileType === fileTypes.gif && options.get('autogif')) {\n\t\t// Animated GIF thumbnails\n\t\tthumb = src\n\t} else {\n\t\tthumb = thumbPath(data, options.get('thumbs') !== 'small')\n\t}\n\n\tconst linkAttrs: ElementAttributes = {\n\t\ttarget: '_blank',\n\t\trel: 'nofollow',\n\t\thref: href || src\n\t}\n\tconst imgAttrs: ElementAttributes = {\n\t\tsrc: thumb,\n\t\twidth: thumbWidth.toString(),\n\t\theight: thumbHeight.toString()\n\t}\n\n\t// Catalog pages\n\tif (href) {\n\t\t// Handle the thumbnails with the HTML5 History controller\n\t\tlinkAttrs['class'] = 'history'\n\n\t\t// No image hover previews\n\t\timgAttrs['class'] = 'expanded'\n\t\tif(options.get('thumbs') === 'hide') {\n\t\t\timgAttrs['style'] = 'display: none'\n\t\t}\n\t}\n\n\treturn parseHTML\n\t\t`<a ${parseAttributes(linkAttrs)}>\n\t\t\t<img ${parseAttributes(imgAttrs)}>\n\t\t</a>`\n}\n"],"sourceRoot":"/source/"}