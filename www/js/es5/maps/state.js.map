{"version":3,"sources":["state.js","state.ts"],"names":["System","register","exports_1","context_1","read","href","board","match","thread","lastN","parseInt","loadFromDB","__awaiter","this","regeneratorRuntime","mark","_callee","resMine","wrap","_context","prev","next","db_1","db","transaction","objectStore","get","exec","sent","id","mine","Set","stop","getModel","el","util_1","getID","posts","displayLoading","loading","$loading","style","display","model_1","collection_1","config","isMobile","page","$thread","$name","$email","$banner","ownPosts","syncs","debug","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","e","rejected","result","done","then","apply","setters","model_1_1","collection_1_1","util_1_1","db_1_1","execute","window","location","document","query","test"],"mappings":"AAAA,YAAAA,QAAOC,UAAU,UAAW,eAAgB,SAAU,QAAS,SAASC,EAAWC,GCqEnF,QAAAC,GAAcC,GACb,GAAMC,GAAQD,EAAKE,MAAM,uBAAuB,GAC/CC,EAASH,EAAKE,MAAM,sCACpBE,EAAQJ,EAAKE,MAAM,kBACpB,QACCD,MAAAA,EACAE,OAAQA,EAASE,SAASF,EAAO,IAAM,EACvCC,MAAOA,EAAQC,SAASD,EAAM,IAAM,GAqBtC,QAAAE,KD3EQ,MAAOC,GAAUC,KAAM,OAAQ,OAAMC,mBAAAC,KAAE,QAAAC,KAsBnC,GCsDLC,EDrDK,OAAOH,oBAAmBI,KAAK,SAAkBC,GAC7C,OACI,OAAQA,EAASC,KAAOD,EAASE,MAC7B,IAAK,GAED,MADAF,GAASE,KAAO,ECiDrBC,EAAAC,GACpBC,YAAY,QAAS,YACrBC,YAAY,SACZC,IAAI,QACJC,MDlDqB,KAAK,GC8CtBV,EAAOE,EAAAS,WAKNX,GAAQY,GACf3B,EAAA,OAAA4B,EAAO,GAAIC,MAAad,ID9CD,KAAK,GACL,IAAK,MACD,MAAOE,GAASa,SAG7BhB,EAASH,SCmDxB,QAAAoB,GAAyBC,GACxB,GAAML,GAAKM,EAAAC,MAAMF,EACjB,OAAKL,GAGEQ,EAAMX,IAAIG,GAFT,KAMT,QAAAS,GAA+BC,GAC9BC,EAASC,MAAMC,QAAUH,EAAU,QAAU,OD1H1C,GASII,GAASC,EAAcT,EAAQb,EC8C1BuB,EAGAC,EAqBAC,EAGAC,EACAC,EACAC,EACAC,EACAX,EAGAH,EAGFP,EAcEsB,EAGAC,EAiBAC,ED7HL1C,GADeT,GAAaA,EAAU0B,GAC1BhB,MAASA,KAAKD,WAAc,SAAU2C,EAASC,EAAYC,EAAGC,GAC1E,MAAO,KAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,QAASC,GAAUC,GAAS,IAAMC,EAAKN,EAAUrC,KAAK0C,IAAW,MAAOE,GAAKJ,EAAOI,IACpF,QAASC,GAASH,GAAS,IAAMC,EAAKN,EAAAA,SAAgBK,IAAW,MAAOE,GAAKJ,EAAOI,IACpF,QAASD,GAAKG,GAAUA,EAAOC,KAAOR,EAAQO,EAAOJ,OAAS,GAAIN,GAAE,SAAUG,GAAWA,EAAQO,EAAOJ,SAAWM,KAAKP,EAAWI,GACnIF,GAAMN,EAAYA,EAAUY,MAAMf,EAASC,IAAanC,WAqChE,OCoDJnB,GAAA,aAAAS,GAiBAT,EAAA,WAAA+B,GASA/B,EAAA,iBAAAoC,ID7EQiC,SACI,SAAUC,GACN7B,EAAU6B,GAEd,SAAUC,GACN7B,EAAe6B,GAEnB,SAAUC,GACNvC,EAASuC,GAEb,SAAUC,GACNrD,EAAOqD,IAEfC,QAAS,WCFJ1E,EAAA,SAAA2C,EAAmBgC,OAAehC,QAGlC3C,EAAA,WAAA4C,EAAqB+B,OAAe/B,UAqBpC5C,EAAA,OAAA6C,EAAO,GAAIJ,GAAAA,WAAMvC,EAAK0E,SAASzE,QAG/BH,EAAA,UAAA8C,EAAU+B,SAASC,MAAM,YACzB9E,EAAA,QAAA+C,EAAQ8B,SAASC,MAAM,UACvB9E,EAAA,SAAAgD,EAAS6B,SAASC,MAAM,WACxB9E,EAAA,UAAAiD,EAAU4B,SAASC,MAAM,YACzB9E,EAAA,WAAAsC,EAAWuC,SAASC,MAAM,kBAG1B9E,EAAA,QAAAmC,EAAQ,GAAIO,GAAAA,YAiBZ1C,EAAA,WAAAkD,EAAW,GAAIrB,MAGf7B,EAAA,QAAAmD,MAiBAnD,EAAA,QAAAoD,EAAQ,kBAAkB2B,KAAKH,SAASzE","file":"state.js","sourcesContent":["System.register(['./model', './collection', './util', './db'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n        return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n            function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n            step((generator = generator.apply(thisArg, _arguments)).next());\n        });\n    };\n    var model_1, collection_1, util_1, db_1;\n    var config, isMobile, page, $thread, $name, $email, $banner, $loading, posts, mine, ownPosts, syncs, debug;\n    function read(href) {\n        const board = href.match(/\\/([a-zA-Z0-9]+?)\\//)[1], thread = href.match(/\\/(\\d+)(:?#\\d+)?(?:[\\?&]\\w+=\\w+)*$/), lastN = href.match(/[\\?&]last=(\\d+)/);\n        return {\n            board: board,\n            thread: thread ? parseInt(thread[1]) : 0,\n            lastN: lastN ? parseInt(lastN[1]) : 0,\n        };\n    }\n    function loadFromDB() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const resMine = yield db_1.db\n                .transaction('posts', 'readonly')\n                .objectStore('posts')\n                .get('mine')\n                .exec();\n            delete resMine.id;\n            exports_1(\"mine\", mine = new Set([resMine]));\n        });\n    }\n    exports_1(\"loadFromDB\", loadFromDB);\n    function getModel(el) {\n        const id = util_1.getID(el);\n        if (!id) {\n            return null;\n        }\n        return posts.get(id);\n    }\n    exports_1(\"getModel\", getModel);\n    function displayLoading(loading) {\n        $loading.style.display = loading ? 'block' : 'none';\n    }\n    exports_1(\"displayLoading\", displayLoading);\n    return {\n        setters:[\n            function (model_1_1) {\n                model_1 = model_1_1;\n            },\n            function (collection_1_1) {\n                collection_1 = collection_1_1;\n            },\n            function (util_1_1) {\n                util_1 = util_1_1;\n            },\n            function (db_1_1) {\n                db_1 = db_1_1;\n            }],\n        execute: function() {\n            exports_1(\"config\", config = window.config);\n            exports_1(\"isMobile\", isMobile = window.isMobile);\n            exports_1(\"page\", page = new model_1.default(read(location.href)));\n            exports_1(\"$thread\", $thread = document.query('threads'));\n            exports_1(\"$name\", $name = document.query('#name'));\n            exports_1(\"$email\", $email = document.query('#email'));\n            exports_1(\"$banner\", $banner = document.query('#banner'));\n            exports_1(\"$loading\", $loading = document.query('#loadingImage'));\n            exports_1(\"posts\", posts = new collection_1.default());\n            exports_1(\"ownPosts\", ownPosts = new Set());\n            exports_1(\"syncs\", syncs = {});\n            exports_1(\"debug\", debug = /[\\?&]debug=true/.test(location.href));\n        }\n    }\n});\n","/*\n Stores the state of the web application\n*/\n\nimport Model from './model'\nimport {Post} from './posts/models'\nimport Collection from './collection'\nimport {getID} from './util'\nimport {db} from './db'\n\n// Allows us to typecheck configs. See config/defaults.json for more info.\ntype Configs = {\n\tboards: {\n\t\tenabled: string[]\n\t\tboards: {[name: string]: {title: string}}\n\t\tdefault: string\n\t\tstaff: string\n\t\tpsuedo: string[][]\n\t\tlinks: string[][]\n\t}\n\n\tlang: {\n\t\tdefault: string\n\t\tenabled: string[]\n\t}\n\n\tstaff: {\n\t\tclasses: {[name: string]: StaffClass}\n\t\tkeyword: string\n\t}\n\n\timages: {\n\t\tthumb: {\n\t\t\tthumbDims: number[]\n\t\t\tmidDims: number[]\n\t\t}\n\t\tspoilers: number[]\n\t\thats: boolean\n\t}\n\n\tbanners: string[]\n\tFAQ: string[]\n\teightball: string[]\n\tradio: boolean\n\tillyaDance: boolean\n\tfeedbackEmail: string\n\tdefaultCSS: string\n\tinfoBanner: string\n}\n\ntype StaffClass = {\n\talias: string\n\trights: {[right: string]: boolean}\n}\n\n// Configuration passed from the server. Some values can be changed during\n// runtime.\nexport const config: Configs = (window as any).config\n\n// Indicates, if in mobile mode. Determined server-side.\nexport const isMobile: boolean = (window as any).isMobile\n\ninterface PageState {\n\tboard: string\n\tthread: number\n\tlastN: number\n}\n\n// Read page state by parsing a URL\nfunction read(href: string): PageState {\n\tconst board = href.match(/\\/([a-zA-Z0-9]+?)\\//)[1],\n\t\tthread = href.match(/\\/(\\d+)(:?#\\d+)?(?:[\\?&]\\w+=\\w+)*$/),\n\t\tlastN = href.match(/[\\?&]last=(\\d+)/)\n\treturn {\n\t\tboard,\n\t\tthread: thread ? parseInt(thread[1]) : 0,\n\t\tlastN: lastN ? parseInt(lastN[1]) : 0,\n\t}\n}\n\n// Load initial page state\nexport const page = new Model(read(location.href))\n\n// Cached DOM elements\nexport const $thread = document.query('threads')\nexport const $name = document.query('#name')\nexport const $email = document.query('#email')\nexport const $banner = document.query('#banner')\nexport const $loading = document.query('#loadingImage')\n\n// All posts currently displayed\nexport const posts = new Collection<Post>()\n\n// Posts I made in any tab\nexport let mine: Set<number>\n\n// Load post number sets from the database\nexport async function loadFromDB() {\n\tconst resMine = await db\n\t\t.transaction('posts', 'readonly')\n\t\t.objectStore('posts')\n\t\t.get('mine')\n\t\t.exec()\n\tdelete resMine.id\n\tmine = new Set<number>([resMine])\n}\n\n// Posts I made in this tab\nexport const ownPosts = new Set<number>()\n\n// Tracks the synchronisation counter of each thread/board\nexport const syncs = {}\n\n// Retrieve model of closest parent post\nexport function getModel(el: Element): Post {\n\tconst id = getID(el)\n\tif (!id) {\n\t\treturn null\n\t}\n\treturn posts.get(id)\n}\n\n// Display or hide the loading animation\nexport function displayLoading(loading: boolean) {\n\t$loading.style.display = loading ? 'block' : 'none'\n}\n\n// Debug mode with more verbose logging\nexport const debug = /[\\?&]debug=true/.test(location.href)\n"],"sourceRoot":"/source/"}