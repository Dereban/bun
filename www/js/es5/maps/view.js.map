{"version":3,"sources":["view.js","view.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","System","register","exports_1","context_1","util_1","model_1","id","setters","util_1_1","model_1_1","execute","View","_ref","el","model","tag","cls","this","document","createElement","setAttribute","attach","value","remove","detach","type","selector","fn","on","events","addEventListener","once","onceAll"],"mappings":"AAAA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAFjiBkB,QAAOC,UAAU,SAAU,WAAY,SAASC,EAAWC,GAEvD,GACIC,GAAQC,CADOF,IAAaA,EAAUG,EAG1C,QACIC,SACI,SAAUC,GACNJ,EAASI,GAEb,SAAUC,GACNJ,EAAUI,IAElBC,QAAS,WAML,GCPZC,GAAA,WAOC,QAPDA,GAAAC,GDSoB,GCFNC,GAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAOC,EAAGH,EAAHG,IAAKC,EAAGJ,EAAHI,IAAKV,EAAEM,EAAFN,EDQf1B,iBAAgBqC,KCfpCN,GAQEM,KAAKH,MAAQA,GAAS,GAAIT,GAAAA,WAC1BY,KAAKJ,GAAKA,GAAMK,SAASC,cAAcJ,GAAO,OAC1CT,GACHW,KAAKJ,GAAGO,aAAa,KAAMd,GAExBU,GACHC,KAAKJ,GAAGO,aAAa,QAASJ,GAE/BC,KAAKH,MAAMO,OAAOJ,MDgDJ,MApCAjC,cC5BhB2B,ID6BoBf,IAAK,SACL0B,MAAO,WCRzBL,KAAKJ,GAAGU,SACRN,KAAKH,MAAMU,OAAOP,YACXA,MAAKH,SDYMlB,IAAK,KACL0B,MAAO,SCTvBG,EAAcC,EAAkBC,GAClCvB,EAAAwB,GAAGX,KAAKJ,GAAIY,EAAMC,EAAUC,MDYV/B,IAAK,UACL0B,MAAO,SCRlBO,GACP,IAAK,GAAIH,KAAYG,GACpBZ,KAAKW,GAAG,QAASF,EAAUG,EAAOH,ODYjB9B,IAAK,QACL0B,MAAO,SCRpBG,EAAcE,GACnBV,KAAKJ,GAAGiB,iBAAiBL,EAAME,MDWb/B,IAAK,OACL0B,MAAO,SCPrBG,EAAcC,EAAkBC,GACpCvB,EAAA2B,KAAKd,KAAKJ,GAAIY,EAAMC,EAAUC,MDUZ/B,IAAK,UACL0B,MAAO,SCPlBG,EAAcE,GACrBvB,EAAA4B,QAAQf,KAAKJ,GAAIY,EAAME,OArDzBhB,IAAAT,GAAA,UAAAS","file":"view.js","sourcesContent":["System.register(['./util', './model'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var util_1, model_1;\n    var View;\n    return {\n        setters:[\n            function (util_1_1) {\n                util_1 = util_1_1;\n            },\n            function (model_1_1) {\n                model_1 = model_1_1;\n            }],\n        execute: function() {\n            class View {\n                constructor({ el, model, tag, cls, id }) {\n                    this.model = model || new model_1.default();\n                    this.el = el || document.createElement(tag || 'div');\n                    if (id) {\n                        this.el.setAttribute('id', id);\n                    }\n                    if (cls) {\n                        this.el.setAttribute('class', cls);\n                    }\n                    this.model.attach(this);\n                }\n                remove() {\n                    this.el.remove();\n                    this.model.detach(this);\n                    delete this.model;\n                }\n                on(type, selector, fn) {\n                    util_1.on(this.el, type, selector, fn);\n                }\n                onClick(events) {\n                    for (let selector in events) {\n                        this.on('click', selector, events[selector]);\n                    }\n                }\n                onAll(type, fn) {\n                    this.el.addEventListener(type, fn);\n                }\n                once(type, selector, fn) {\n                    util_1.once(this.el, type, selector, fn);\n                }\n                onceAll(type, fn) {\n                    util_1.onceAll(this.el, type, fn);\n                }\n            }\n            exports_1(\"default\", View);\n        }\n    }\n});\n","import {on, once, onceAll} from './util'\nimport Model from './model'\n\nexport type ViewAttrs = {\n\tel?: Element\n\tmodel?: Model\n\ttag?: string\n\tcls?: string\n\tid?: string\n}\n\n// Generic view class, that all over view classes extend\nexport default class View {\n\tmodel: Model\n\tel: Element\n\n\t// Creates a new View and binds it to the target model. If none, creates a\n\t// blank model. If no element suplied, creates a new one from tags. Sets\n\t// class and id, if supplied.\n\tconstructor({el, model, tag, cls, id}: ViewAttrs) {\n\t\tthis.model = model || new Model()\n\t\tthis.el = el || document.createElement(tag || 'div')\n\t\tif (id) {\n\t\t\tthis.el.setAttribute('id', id)\n\t\t}\n\t\tif (cls) {\n\t\t\tthis.el.setAttribute('class', cls)\n\t\t}\n\t\tthis.model.attach(this)\n\t}\n\n\t// Remove the element from the DOM and detach from its model, allowing the\n\t// View instance to be garbage collected.\n\tremove() {\n\t\tthis.el.remove()\n\t\tthis.model.detach(this)\n\t\tdelete this.model\n\t}\n\n\t// Add selector-specific event listeners to the view\n\ton(type: string, selector: string, fn: EventListener) {\n\t\ton(this.el, type, selector, fn)\n\t}\n\n\t// Shorthand for adding multiple click event listeners as an object.\n\t// We use those the most, so nice to have.\n\tonClick(events: {[selector: string]: EventListener}) {\n\t\tfor (let selector in events) {\n\t\t\tthis.on('click', selector, events[selector])\n\t\t}\n\t}\n\n\t// Add event listener to view's element, whithout filtering by selector\n\tonAll(type: string, fn: EventListener) {\n\t\tthis.el.addEventListener(type, fn)\n\t}\n\n\t// Add selector-specific event listener, that will execute only once on a\n\t// specific target\n\tonce(type: string, selector: string, fn: EventListener) {\n\t\tonce(this.el, type, selector, fn)\n\t}\n\n\t// Add event listener, that will execute only once\n\tonceAll(type: string, fn: EventListener) {\n\t\tonceAll(this.el, type, fn)\n\t}\n}\n"],"sourceRoot":"/source/"}