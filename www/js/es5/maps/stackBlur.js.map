{"version":3,"sources":["stackBlur.js","stackBlur.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","System","register","exports_1","context_1","blurCanvas","canvas","top_x","top_y","width","height","radius","isNaN","context","getContext","imageData","getImageData","pixels","data","x","undefined","y","i","p","yp","yi","yw","r_sum","g_sum","b_sum","a_sum","r_out_sum","g_out_sum","b_out_sum","a_out_sum","r_in_sum","g_in_sum","b_in_sum","a_in_sum","pr","pg","pb","pa","rbs","div","widthMinus1","heightMinus1","radiusPlus1","sumFactor","stackStart","BlurStack","stack","stackEnd","next","stackIn","stackOut","mul_sum","mul_table","shg_sum","shg_table","r","g","b","a","putImageData","id","setters","execute"],"mappings":"AAAA,YAEA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhHC,OAAOC,YAAa,SAASC,EAAWC,GC+ExC,QAAAC,GACCC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,KAAIC,MAAMD,IAAoB,EAATA,GAArB,CAGAA,GAAU,CAEV,IAAME,GAAUP,EAAOQ,WAAW,MACjCC,EAAYF,EAAQG,aAAaT,EAAOC,EAAOC,EAAOC,GACtDO,EAASF,EAAUG,KAEhBC,EAASC,OACZC,EAASD,OACTE,EAASF,OACTG,EAASH,OACTI,EAAUJ,OACVK,EAAUL,OACVM,EAAUN,OACVO,EAAaP,OACbQ,EAAaR,OACbS,EAAaT,OACbU,EAAaV,OACbW,EAAiBX,OACjBY,EAAiBZ,OACjBa,EAAiBb,OACjBc,EAAiBd,OACjBe,EAAgBf,OAChBgB,EAAgBhB,OAChBiB,EAAgBjB,OAChBkB,EAAgBlB,OAChBmB,EAAUnB,OACVoB,EAAUpB,OACVqB,EAAUrB,OACVsB,EAAUtB,OACVuB,EAAWvB,OAGNwB,EAAMjC,EAASA,EAAS,EAC7BkC,EAAepC,EAAQ,EACvBqC,EAAepC,EAAS,EACxBqC,EAAepC,EAAS,EACxBqC,EAAYD,GAAeA,EAAc,GAAK,EAEzCE,EAAa,GAAIC,GACnBC,EAAQF,EACXG,EAAmBhC,MACpB,KAAKE,EAAI,EAAOsB,EAAJtB,EAASA,IACpB6B,EAAQA,EAAME,KAAO,GAAIH,GACrB5B,GAAKyB,IACRK,EAAWD,EAGbA,GAAME,KAAOJ,CACb,IAAIK,GAAkBlC,OACrBmC,EAAmBnC,MAEpBM,GAAKD,EAAK,CAEV,IAAM+B,GAAUC,EAAU9C,GACzB+C,EAAUC,EAAUhD,EAErB,KAAKU,EAAI,EAAOX,EAAJW,EAAYA,IAAK,CAgB5B,IAfAc,EAAWC,EAAWC,EAAWC,EAAWX,EAAQC,EAAQC,EACzDC,EAAQ,EAEXC,EAAYgB,GAAeR,EAAKtB,EAAOQ,IACvCO,EAAYe,GAAeP,EAAKvB,EAAOQ,EAAG,IAC1CQ,EAAYc,GAAeN,EAAKxB,EAAOQ,EAAG,IAC1CS,EAAYa,GAAeL,EAAKzB,EAAOQ,EAAG,IAE1CE,GAASqB,EAAYT,EACrBX,GAASoB,EAAYR,EACrBX,GAASmB,EAAYP,EACrBX,GAASkB,EAAYN,EAErBS,EAAQF,EAEJ3B,EAAI,EAAOyB,EAAJzB,EAAiBA,IAC3B6B,EAAMS,EAAIrB,EACVY,EAAMU,EAAIrB,EACVW,EAAMW,EAAIrB,EACVU,EAAMY,EAAIrB,EACVS,EAAQA,EAAME,IAGf,KAAI/B,EAAI,EAAOyB,EAAJzB,EAAiBA,IAC3BC,EAAIE,IAAqBH,EAAduB,EAAkBA,EAAcvB,IAAM,GACjDK,IAAUwB,EAAMS,EAAKrB,EAAKtB,EAAOM,KAAQoB,EAAMI,EAAczB,GAC7DM,IAAUuB,EAAMU,EAAKrB,EAAKvB,EAAOM,EAAE,IAAOoB,EAC1Cd,IAAUsB,EAAMW,EAAKrB,EAAKxB,EAAOM,EAAE,IAAOoB,EAC1Cb,IAAUqB,EAAMY,EAAKrB,EAAKzB,EAAOM,EAAE,IAAOoB,EAE1CR,GAAYI,EACZH,GAAYI,EACZH,GAAYI,EACZH,GAAYI,EAEZS,EAAQA,EAAME,IAMf,KAFAC,EAAUL,EACVM,EAAWH,EACNjC,EAAI,EAAOV,EAAJU,EAAWA,IACtBF,EAAOQ,EAAG,GAAKiB,EAAKZ,EAAS0B,GAAYE,EAC/B,GAANhB,GACHA,EAAK,IAAMA,EACXzB,EAAOQ,IAASE,EAAS6B,GAAYE,GAAWhB,EAChDzB,EAAOQ,EAAG,IAAMG,EAAS4B,GAAYE,GAAWhB,EAChDzB,EAAOQ,EAAG,IAAMI,EAAS2B,GAAYE,GAAWhB,GAEhDzB,EAAOQ,GAAMR,EAAOQ,EAAG,GAAKR,EAAOQ,EAAG,GAAK,EAG5CE,GAASI,EACTH,GAASI,EACTH,GAASI,EACTH,GAASI,EAETH,GAAauB,EAAQM,EACrB5B,GAAasB,EAAQO,EACrB5B,GAAaqB,EAAQQ,EACrB5B,GAAaoB,EAAQS,EAErBxC,EAAIG,IAAQH,EAAIJ,EAAIR,EAAS,GAAKkC,EAActB,EAAIsB,IAChD,EAEJV,GAAamB,EAAQM,EAAI3C,EAAOM,GAChCa,GAAakB,EAAQO,EAAI5C,EAAOM,EAAE,GAClCc,GAAaiB,EAAQQ,EAAI7C,EAAOM,EAAE,GAClCe,GAAagB,EAAQS,EAAI9C,EAAOM,EAAE,GAElCI,GAASQ,EACTP,GAASQ,EACTP,GAASQ,EACTP,GAASQ,EAETgB,EAAUA,EAAQD,KAElBtB,GAAcQ,EAAKgB,EAASK,EAC5B5B,GAAcQ,EAAKe,EAASM,EAC5B5B,GAAcQ,EAAKc,EAASO,EAC5B5B,GAAcQ,EAAKa,EAASQ,EAE5B5B,GAAYI,EACZH,GAAYI,EACZH,GAAYI,EACZH,GAAYI,EAEZa,EAAWA,EAASF,KAEpB5B,GAAM,CAEPC,IAAMjB,EAIP,IAAKU,EAAI,EAAOV,EAAJU,EAAWA,IAAK,CAiB3B,IAhBAiB,EAAWC,EAAWC,EAAWH,EAAWP,EAAQC,EAAQC,EACzDH,EAAQ,EAEXF,EAAKN,GAAK,EACVY,EAAYgB,GAAeR,EAAKtB,EAAOQ,IACvCO,EAAYe,GAAeP,EAAKvB,EAAOQ,EAAG,IAC1CQ,EAAYc,GAAeN,EAAKxB,EAAOQ,EAAG,IAC1CS,EAAYa,GAAeL,EAAKzB,EAAOQ,EAAG,IAE1CE,GAASqB,EAAYT,EACrBX,GAASoB,EAAYR,EACrBX,GAASmB,EAAYP,EACrBX,GAASkB,EAAYN,EAErBS,EAAQF,EAEJ3B,EAAI,EAAOyB,EAAJzB,EAAiBA,IAC3B6B,EAAMS,EAAIrB,EACVY,EAAMU,EAAIrB,EACVW,EAAMW,EAAIrB,EACVU,EAAMY,EAAIrB,EACVS,EAAQA,EAAME,IAKf,KAFA7B,EAAKf,EAEDa,EAAI,EAAQX,GAALW,EAAaA,IACvBG,EAAKD,EAAOL,GAAO,EAEnBQ,IAAUwB,EAAMS,EAAKrB,EAAKtB,EAAOQ,KAASkB,EAAMI,EAAczB,GAC9DM,IAAWuB,EAAMU,EAAMrB,EAAKvB,EAAOQ,EAAG,IAAOkB,EAC7Cd,IAAWsB,EAAMW,EAAMrB,EAAKxB,EAAOQ,EAAG,IAAOkB,EAC7Cb,IAAWqB,EAAMY,EAAMrB,EAAKzB,EAAOQ,EAAG,IAAOkB,EAC7CR,GAAYI,EACZH,GAAYI,EACZH,GAAYI,EACZH,GAAYI,EAEZS,EAAQA,EAAME,KAEPP,EAAJxB,IACFE,GAAMf,EAOR,KAHAgB,EAAKN,EACLmC,EAAUL,EACVM,EAAWH,EACN/B,EAAI,EAAOX,EAAJW,EAAYA,IACvBE,EAAIE,GAAM,EACVR,EAAOM,EAAE,GAAKmB,EAAKZ,EAAS0B,GAAYE,EACpChB,EAAK,GACRA,EAAK,IAAMA,EACXzB,EAAOM,IAAQI,EAAS6B,GAAYE,GAAWhB,EAC/CzB,EAAOM,EAAE,IAAMK,EAAS4B,GAAYE,GAAWhB,EAC/CzB,EAAOM,EAAE,IAAMM,EAAS2B,GAAYE,GAAWhB,GAE/CzB,EAAOM,GAAKN,EAAOM,EAAE,GAAKN,EAAOM,EAAE,GAAK,EAGzCI,GAASI,EACTH,GAASI,EACTH,GAASI,EACTH,GAASI,EAETH,GAAauB,EAAQM,EACrB5B,GAAasB,EAAQO,EACrB5B,GAAaqB,EAAQQ,EACrB5B,GAAaoB,EAAQS,EAErBxC,EAAIJ,IAASI,EAAIF,EAAI0B,GAAeD,EACnCvB,EAAIuB,GAAiBrC,GAAW,EAEjCkB,GAAUQ,GAAamB,EAAQM,EAAI3C,EAAOM,GAC1CK,GAAUQ,GAAakB,EAAQO,EAAI5C,EAAOM,EAAE,GAC5CM,GAAUQ,GAAaiB,EAAQQ,EAAI7C,EAAOM,EAAE,GAC5CO,GAAUQ,GAAagB,EAAQS,EAAI9C,EAAOM,EAAE,GAE5C+B,EAAUA,EAAQD,KAElBtB,GAAcQ,EAAKgB,EAASK,EAC5B5B,GAAcQ,EAAKe,EAASM,EAC5B5B,GAAcQ,EAAKc,EAASO,EAC5B5B,GAAcQ,EAAKa,EAASQ,EAE5B5B,GAAYI,EACZH,GAAYI,EACZH,GAAYI,EACZH,GAAYI,EAEZa,EAAWA,EAASF,KAEpB5B,GAAMhB,EAIRI,EAAQmD,aAAajD,EAAWR,EAAOC,IDjVpC,GCuCEiD,GAmBAE,EAAST,CD1DQ9C,IAAaA,EAAU6D,EAmL1C,OCtGJ9D,GAAA,UAAAE,IDuGQ6D,WACAC,QAAS,WC9IXV,GACL,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5D,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAGnDE,GACL,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC3D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAC5D,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI","file":"stackBlur.js","sourcesContent":["System.register([], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var mul_table, shg_table, BlurStack;\n    function blurCanvas(canvas, top_x, top_y, width, height, radius) {\n        if (isNaN(radius) || radius < 1) {\n            return;\n        }\n        radius |= 0;\n        const context = canvas.getContext(\"2d\"), imageData = context.getImageData(top_x, top_y, width, height), pixels = imageData.data;\n        let x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;\n        const div = radius + radius + 1, widthMinus1 = width - 1, heightMinus1 = height - 1, radiusPlus1 = radius + 1, sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n        const stackStart = new BlurStack();\n        let stack = stackStart, stackEnd;\n        for (i = 1; i < div; i++) {\n            stack = stack.next = new BlurStack();\n            if (i == radiusPlus1) {\n                stackEnd = stack;\n            }\n        }\n        stack.next = stackStart;\n        let stackIn, stackOut;\n        yw = yi = 0;\n        const mul_sum = mul_table[radius], shg_sum = shg_table[radius];\n        for (y = 0; y < height; y++) {\n            r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum\n                = a_sum = 0;\n            r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n            g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n            b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n            a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n            stack = stackStart;\n            for (i = 0; i < radiusPlus1; i++) {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n            for (i = 1; i < radiusPlus1; i++) {\n                p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);\n                r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n                g_sum += (stack.g = (pg = pixels[p + 1])) * rbs;\n                b_sum += (stack.b = (pb = pixels[p + 2])) * rbs;\n                a_sum += (stack.a = (pa = pixels[p + 3])) * rbs;\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n                stack = stack.next;\n            }\n            stackIn = stackStart;\n            stackOut = stackEnd;\n            for (x = 0; x < width; x++) {\n                pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;\n                if (pa != 0) {\n                    pa = 255 / pa;\n                    pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;\n                    pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                    pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n                }\n                else {\n                    pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;\n                }\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n                p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1))\n                    << 2;\n                r_in_sum += (stackIn.r = pixels[p]);\n                g_in_sum += (stackIn.g = pixels[p + 1]);\n                b_in_sum += (stackIn.b = pixels[p + 2]);\n                a_in_sum += (stackIn.a = pixels[p + 3]);\n                r_sum += r_in_sum;\n                g_sum += g_in_sum;\n                b_sum += b_in_sum;\n                a_sum += a_in_sum;\n                stackIn = stackIn.next;\n                r_out_sum += (pr = stackOut.r);\n                g_out_sum += (pg = stackOut.g);\n                b_out_sum += (pb = stackOut.b);\n                a_out_sum += (pa = stackOut.a);\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n                stackOut = stackOut.next;\n                yi += 4;\n            }\n            yw += width;\n        }\n        for (x = 0; x < width; x++) {\n            g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum\n                = r_sum = 0;\n            yi = x << 2;\n            r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n            g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);\n            b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);\n            a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);\n            r_sum += sumFactor * pr;\n            g_sum += sumFactor * pg;\n            b_sum += sumFactor * pb;\n            a_sum += sumFactor * pa;\n            stack = stackStart;\n            for (i = 0; i < radiusPlus1; i++) {\n                stack.r = pr;\n                stack.g = pg;\n                stack.b = pb;\n                stack.a = pa;\n                stack = stack.next;\n            }\n            yp = width;\n            for (i = 1; i <= radius; i++) {\n                yi = (yp + x) << 2;\n                r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n                g_sum += (stack.g = (pg = pixels[yi + 1])) * rbs;\n                b_sum += (stack.b = (pb = pixels[yi + 2])) * rbs;\n                a_sum += (stack.a = (pa = pixels[yi + 3])) * rbs;\n                r_in_sum += pr;\n                g_in_sum += pg;\n                b_in_sum += pb;\n                a_in_sum += pa;\n                stack = stack.next;\n                if (i < heightMinus1) {\n                    yp += width;\n                }\n            }\n            yi = x;\n            stackIn = stackStart;\n            stackOut = stackEnd;\n            for (y = 0; y < height; y++) {\n                p = yi << 2;\n                pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;\n                if (pa > 0) {\n                    pa = 255 / pa;\n                    pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;\n                    pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;\n                    pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;\n                }\n                else {\n                    pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;\n                }\n                r_sum -= r_out_sum;\n                g_sum -= g_out_sum;\n                b_sum -= b_out_sum;\n                a_sum -= a_out_sum;\n                r_out_sum -= stackIn.r;\n                g_out_sum -= stackIn.g;\n                b_out_sum -= stackIn.b;\n                a_out_sum -= stackIn.a;\n                p = (x + (((p = y + radiusPlus1) < heightMinus1 ?\n                    p : heightMinus1) * width)) << 2;\n                r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n                g_sum += (g_in_sum += (stackIn.g = pixels[p + 1]));\n                b_sum += (b_in_sum += (stackIn.b = pixels[p + 2]));\n                a_sum += (a_in_sum += (stackIn.a = pixels[p + 3]));\n                stackIn = stackIn.next;\n                r_out_sum += (pr = stackOut.r);\n                g_out_sum += (pg = stackOut.g);\n                b_out_sum += (pb = stackOut.b);\n                a_out_sum += (pa = stackOut.a);\n                r_in_sum -= pr;\n                g_in_sum -= pg;\n                b_in_sum -= pb;\n                a_in_sum -= pa;\n                stackOut = stackOut.next;\n                yi += width;\n            }\n        }\n        context.putImageData(imageData, top_x, top_y);\n    }\n    exports_1(\"default\", blurCanvas);\n    return {\n        setters:[],\n        execute: function() {\n            mul_table = [\n                512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512,\n                454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512,\n                482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456,\n                437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512,\n                497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328,\n                320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456,\n                446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335,\n                329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512,\n                505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405,\n                399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328,\n                324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271,\n                268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456,\n                451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388,\n                385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335,\n                332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292,\n                289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259\n            ];\n            shg_table = [\n                9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n                17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n                19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n                20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n                21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n                21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n                22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n                22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n                23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n                23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n                23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n                23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n                24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24\n            ];\n            class BlurStack {\n                constructor() {\n                    this.r = 0;\n                    this.g = 0;\n                    this.b = 0;\n                    this.a = 0;\n                }\n            }\n        }\n    }\n});\n","/*\n\n StackBlur - a fast almost Gaussian Blur For Canvas\n\n Version: \t0.5\n Author:\t\tMario Klingemann\n Contact: \tmario@quasimondo.com\n Website:\thttp://www.quasimondo.com/StackBlurForCanvas\n Twitter:\t@quasimondo\n\n In case you find this class useful - especially in commercial projects -\n I am not totally unhappy for a small donation to my PayPal account\n mario@quasimondo.de\n\n Or support me on flattr:\n https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript\n\n Copyright (c) 2010 Mario Klingemann\n\n Permission is hereby granted, free of charge, to any person\n obtaining a copy of this software and associated documentation\n files (the \"Software\"), to deal in the Software without\n restriction, including without limitation the rights to use,\n copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the\n Software is furnished to do so, subject to the following\n conditions:\n\n The above copyright notice and this permission notice shall be\n included in all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n OTHER DEALINGS IN THE SOFTWARE.\n */\n\nconst mul_table = [\n\t512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,\n\t454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,\n\t482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,\n\t437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,\n\t497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,\n\t320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,\n\t446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,\n\t329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,\n\t505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,\n\t399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,\n\t324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,\n\t268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,\n\t451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,\n\t385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,\n\t332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,\n\t289,287,285,282,280,278,275,273,271,269,267,265,263,261,259\n]\n\nconst shg_table = [\n\t9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n\t17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,\n\t19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n\t20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,\n\t21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,\n\t21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,\n\t22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n\t22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,\n\t23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n\t23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n\t23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n\t23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24\n]\n\nexport default function blurCanvas(\n\tcanvas: HTMLCanvasElement,\n\ttop_x: number,\n\ttop_y: number,\n\twidth: number,\n\theight: number,\n\tradius: number\n) {\n\tif (isNaN(radius) || radius < 1) {\n\t\treturn\n\t}\n\tradius |= 0\n\n\tconst context = canvas.getContext(\"2d\"),\n\t\timageData = context.getImageData(top_x, top_y, width, height),\n\t\tpixels = imageData.data\n\n\tlet x: number,\n\t\ty: number,\n\t\ti: number,\n\t\tp: number,\n\t\typ: number,\n\t\tyi: number,\n\t\tyw: number,\n\t\tr_sum: number,\n\t\tg_sum: number,\n\t\tb_sum: number,\n\t\ta_sum: number,\n\t\tr_out_sum: number,\n\t\tg_out_sum: number,\n\t\tb_out_sum: number,\n\t\ta_out_sum: number,\n\t\tr_in_sum: number,\n\t\tg_in_sum: number,\n\t\tb_in_sum: number,\n\t\ta_in_sum: number,\n\t\tpr: number,\n\t\tpg: number,\n\t\tpb: number,\n\t\tpa: number,\n\t\trbs: number\n\n\n\tconst div = radius + radius + 1,\n\t\twidthMinus1  = width - 1,\n\t\theightMinus1 = height - 1,\n\t\tradiusPlus1  = radius + 1,\n\t\tsumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2\n\n\tconst stackStart = new BlurStack()\n\tlet stack = stackStart,\n\t\tstackEnd: BlurStack\n\tfor (i = 1; i < div; i++) {\n\t\tstack = stack.next = new BlurStack()\n\t\tif (i == radiusPlus1) {\n\t\t\tstackEnd = stack\n\t\t}\n\t}\n\tstack.next = stackStart\n\tlet stackIn: BlurStack,\n\t\tstackOut: BlurStack\n\n\tyw = yi = 0\n\n\tconst mul_sum = mul_table[radius],\n\t\tshg_sum = shg_table[radius]\n\n\tfor (y = 0; y < height; y++) {\n\t\tr_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum\n\t\t\t= a_sum = 0\n\n\t\tr_out_sum = radiusPlus1 * (pr = pixels[yi])\n\t\tg_out_sum = radiusPlus1 * (pg = pixels[yi+1])\n\t\tb_out_sum = radiusPlus1 * (pb = pixels[yi+2])\n\t\ta_out_sum = radiusPlus1 * (pa = pixels[yi+3])\n\n\t\tr_sum += sumFactor * pr\n\t\tg_sum += sumFactor * pg\n\t\tb_sum += sumFactor * pb\n\t\ta_sum += sumFactor * pa\n\n\t\tstack = stackStart\n\n\t\tfor(i = 0; i < radiusPlus1; i++) {\n\t\t\tstack.r = pr\n\t\t\tstack.g = pg\n\t\t\tstack.b = pb\n\t\t\tstack.a = pa\n\t\t\tstack = stack.next\n\t\t}\n\n\t\tfor(i = 1; i < radiusPlus1; i++) {\n\t\t\tp = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2 )\n\t\t\tr_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i)\n\t\t\tg_sum += (stack.g = (pg = pixels[p+1])) * rbs;\n\t\t\tb_sum += (stack.b = (pb = pixels[p+2])) * rbs\n\t\t\ta_sum += (stack.a = (pa = pixels[p+3])) * rbs\n\n\t\t\tr_in_sum += pr\n\t\t\tg_in_sum += pg\n\t\t\tb_in_sum += pb\n\t\t\ta_in_sum += pa\n\n\t\t\tstack = stack.next\n\t\t}\n\n\n\t\tstackIn = stackStart\n\t\tstackOut = stackEnd\n\t\tfor (x = 0; x < width; x++) {\n\t\t\tpixels[yi+3] = pa = (a_sum * mul_sum) >> shg_sum\n\t\t\tif (pa != 0) {\n\t\t\t\tpa = 255 / pa;\n\t\t\t\tpixels[yi]   = ((r_sum * mul_sum) >> shg_sum) * pa\n\t\t\t\tpixels[yi+1] = ((g_sum * mul_sum) >> shg_sum) * pa\n\t\t\t\tpixels[yi+2] = ((b_sum * mul_sum) >> shg_sum) * pa\n\t\t\t} else {\n\t\t\t\tpixels[yi] = pixels[yi+1] = pixels[yi+2] = 0\n\t\t\t}\n\n\t\t\tr_sum -= r_out_sum\n\t\t\tg_sum -= g_out_sum\n\t\t\tb_sum -= b_out_sum\n\t\t\ta_sum -= a_out_sum\n\n\t\t\tr_out_sum -= stackIn.r\n\t\t\tg_out_sum -= stackIn.g\n\t\t\tb_out_sum -= stackIn.b\n\t\t\ta_out_sum -= stackIn.a\n\n\t\t\tp = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1))\n\t\t\t\t<< 2\n\n\t\t\tr_in_sum += (stackIn.r = pixels[p])\n\t\t\tg_in_sum += (stackIn.g = pixels[p+1])\n\t\t\tb_in_sum += (stackIn.b = pixels[p+2])\n\t\t\ta_in_sum += (stackIn.a = pixels[p+3])\n\n\t\t\tr_sum += r_in_sum\n\t\t\tg_sum += g_in_sum\n\t\t\tb_sum += b_in_sum\n\t\t\ta_sum += a_in_sum\n\n\t\t\tstackIn = stackIn.next\n\n\t\t\tr_out_sum += (pr = stackOut.r)\n\t\t\tg_out_sum += (pg = stackOut.g)\n\t\t\tb_out_sum += (pb = stackOut.b)\n\t\t\ta_out_sum += (pa = stackOut.a)\n\n\t\t\tr_in_sum -= pr\n\t\t\tg_in_sum -= pg\n\t\t\tb_in_sum -= pb\n\t\t\ta_in_sum -= pa\n\n\t\t\tstackOut = stackOut.next\n\n\t\t\tyi += 4\n\t\t}\n\t\tyw += width\n\t}\n\n\n\tfor (x = 0; x < width; x++) {\n\t\tg_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum\n\t\t\t= r_sum = 0\n\n\t\tyi = x << 2\n\t\tr_out_sum = radiusPlus1 * (pr = pixels[yi])\n\t\tg_out_sum = radiusPlus1 * (pg = pixels[yi+1])\n\t\tb_out_sum = radiusPlus1 * (pb = pixels[yi+2])\n\t\ta_out_sum = radiusPlus1 * (pa = pixels[yi+3])\n\n\t\tr_sum += sumFactor * pr\n\t\tg_sum += sumFactor * pg\n\t\tb_sum += sumFactor * pb\n\t\ta_sum += sumFactor * pa\n\n\t\tstack = stackStart\n\n\t\tfor(i = 0; i < radiusPlus1; i++) {\n\t\t\tstack.r = pr\n\t\t\tstack.g = pg\n\t\t\tstack.b = pb\n\t\t\tstack.a = pa\n\t\t\tstack = stack.next\n\t\t}\n\n\t\typ = width\n\n\t\tfor(i = 1; i <= radius; i++) {\n\t\t\tyi = ( yp + x ) << 2\n\n\t\t\tr_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i)\n\t\t\tg_sum += ( stack.g = ( pg = pixels[yi+1])) * rbs\n\t\t\tb_sum += ( stack.b = ( pb = pixels[yi+2])) * rbs\n\t\t\ta_sum += ( stack.a = ( pa = pixels[yi+3])) * rbs\n\t\t\tr_in_sum += pr\n\t\t\tg_in_sum += pg\n\t\t\tb_in_sum += pb\n\t\t\ta_in_sum += pa\n\n\t\t\tstack = stack.next\n\n\t\t\tif(i < heightMinus1) {\n\t\t\t\typ += width\n\t\t\t}\n\t\t}\n\n\t\tyi = x\n\t\tstackIn = stackStart\n\t\tstackOut = stackEnd\n\t\tfor (y = 0; y < height; y++) {\n\t\t\tp = yi << 2\n\t\t\tpixels[p+3] = pa = (a_sum * mul_sum) >> shg_sum\n\t\t\tif (pa > 0) {\n\t\t\t\tpa = 255 / pa\n\t\t\t\tpixels[p]   = ((r_sum * mul_sum) >> shg_sum) * pa\n\t\t\t\tpixels[p+1] = ((g_sum * mul_sum) >> shg_sum) * pa\n\t\t\t\tpixels[p+2] = ((b_sum * mul_sum) >> shg_sum) * pa\n\t\t\t} else {\n\t\t\t\tpixels[p] = pixels[p+1] = pixels[p+2] = 0\n\t\t\t}\n\n\t\t\tr_sum -= r_out_sum\n\t\t\tg_sum -= g_out_sum\n\t\t\tb_sum -= b_out_sum\n\t\t\ta_sum -= a_out_sum\n\n\t\t\tr_out_sum -= stackIn.r\n\t\t\tg_out_sum -= stackIn.g\n\t\t\tb_out_sum -= stackIn.b\n\t\t\ta_out_sum -= stackIn.a\n\n\t\t\tp = (x + ((( p = y + radiusPlus1) < heightMinus1 ?\n\t\t\t\tp : heightMinus1 ) * width)) << 2\n\n\t\t\tr_sum += (r_in_sum += (stackIn.r = pixels[p]))\n\t\t\tg_sum += (g_in_sum += (stackIn.g = pixels[p+1]))\n\t\t\tb_sum += (b_in_sum += (stackIn.b = pixels[p+2]))\n\t\t\ta_sum += (a_in_sum += (stackIn.a = pixels[p+3]))\n\n\t\t\tstackIn = stackIn.next\n\n\t\t\tr_out_sum += (pr = stackOut.r)\n\t\t\tg_out_sum += (pg = stackOut.g)\n\t\t\tb_out_sum += (pb = stackOut.b)\n\t\t\ta_out_sum += (pa = stackOut.a)\n\n\t\t\tr_in_sum -= pr\n\t\t\tg_in_sum -= pg\n\t\t\tb_in_sum -= pb\n\t\t\ta_in_sum -= pa\n\n\t\t\tstackOut = stackOut.next\n\n\t\t\tyi += width\n\t\t}\n\t}\n\n\tcontext.putImageData(imageData, top_x, top_y)\n}\n\nclass BlurStack {\n\tr: number = 0\n\tg: number = 0\n\tb: number = 0\n\ta: number = 0\n\tnext: BlurStack\n\tconstructor() {}\n}\n"],"sourceRoot":"/source/"}