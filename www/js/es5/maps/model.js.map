{"version":3,"sources":["model.js","model.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","System","register","exports_1","context_1","underscore_1","id","setters","underscore_1_1","execute","Model","attrs","arguments","undefined","this","views","Set","changeHooks","value","val","execChangeHooks","extend","push","get","object","func","hooks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","collection","remove","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","view","add"],"mappings":"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","file":"model.js","sourcesContent":["System.register(['underscore'], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var underscore_1;\n    var Model;\n    return {\n        setters:[\n            function (underscore_1_1) {\n                underscore_1 = underscore_1_1;\n            }],\n        execute: function() {\n            class Model {\n                constructor(attrs = {}) {\n                    this.views = new Set();\n                    this.changeHooks = {};\n                    this.attrs = attrs;\n                }\n                get(key) {\n                    return this.attrs[key];\n                }\n                set(key, val) {\n                    this.attrs[key] = val;\n                    this.execChangeHooks(key, val);\n                }\n                setAttrs(attrs) {\n                    underscore_1.extend(this.attrs, attrs);\n                    for (let key in attrs) {\n                        this.execChangeHooks(key, attrs[key]);\n                    }\n                }\n                append(key, val) {\n                    if (this.attrs[key]) {\n                        this.attrs[key].push(val);\n                    }\n                    else {\n                        this.attrs[key] = [val];\n                    }\n                    this.execChangeHooks(key, this.get(key));\n                }\n                extend(key, object) {\n                    if (this.attrs[key]) {\n                        underscore_1.extend(this.attrs[key], object);\n                    }\n                    else {\n                        this.attrs[key] = object;\n                    }\n                    this.execChangeHooks(key, this.get(key));\n                }\n                onChange(key, func) {\n                    if (this.changeHooks[key]) {\n                        this.changeHooks[key].push(func);\n                    }\n                    else {\n                        this.changeHooks[key] = [func];\n                    }\n                }\n                execChangeHooks(key, val) {\n                    const hooks = this.changeHooks[key];\n                    if (!hooks) {\n                        return;\n                    }\n                    for (let func of hooks) {\n                        func(val);\n                    }\n                }\n                remove() {\n                    if (this.collection) {\n                        this.collection.remove(this);\n                    }\n                    delete this.changeHooks;\n                    delete this.attrs;\n                    for (let view of this.views) {\n                        view.remove();\n                    }\n                }\n                attach(view) {\n                    this.views.add(view);\n                }\n                detach(view) {\n                    this.views.delete(view);\n                }\n            }\n            exports_1(\"default\", Model);\n        }\n    }\n});\n","import {extend} from 'underscore'\nimport Collection from './collection'\nimport View from './view'\n\nexport type ModelAttrs = {[attr: string]: any}\nexport type HookHandler = (arg: any) => void\nexport type HookMap = {[key: string]: HookHandler[]}\n\n// Generic model class, that all other model classes extend\nexport default class Model {\n\tattrs: ModelAttrs\n\tid: string|number\n\tcollection: Collection<Model>\n\tviews: Set<View> = new Set<View>()\n\tprivate changeHooks: HookMap = {}\n\n\tconstructor(attrs: ModelAttrs = {}) {\n\t\tthis.attrs = attrs\n\t}\n\n\t// Retrieve a stored value of specific key from the model's attribute\n\t// object\n\tget(key: string): any {\n\t\treturn this.attrs[key]\n\t}\n\n\t// Set a key to a target value\n\tset(key: string, val: any) {\n\t\tthis.attrs[key] = val\n\t\tthis.execChangeHooks(key, val)\n\t}\n\n\t// Extend the model attribute hash, with the suplied object. Shorthand, for\n\t// setting multiple fields simultaniously.\n\tsetAttrs(attrs: ModelAttrs) {\n\t\textend(this.attrs, attrs)\n\t\tfor (let key in attrs) {\n\t\t\tthis.execChangeHooks(key, attrs[key])\n\t\t}\n\t}\n\n\t// Append value to an array strored at the given key. If the array does not\n\t// exist, it is created.\n\tappend(key: string, val: any) {\n\t\tif (this.attrs[key]) {\n\t\t\tthis.attrs[key].push(val)\n\t\t} else {\n\t\t\tthis.attrs[key] = [val]\n\t\t}\n\t\tthis.execChangeHooks(key, this.get(key))\n\t}\n\n\t// Extend an object at target key. If key does not exist, simply assign the\n\t// object to the key.\n\textend(key: string, object: {}) {\n\t\tif (this.attrs[key]) {\n\t\t\textend(this.attrs[key], object)\n\t\t} else {\n\t\t\tthis.attrs[key] = object\n\t\t}\n\t\tthis.execChangeHooks(key, this.get(key))\n\t}\n\n\t// Add a function to be executed, when .set(), .setAttrs(), .append() or\n\t// .extend() modify a key's value.\n\tonChange(key: string, func: HookHandler) {\n\t\tif (this.changeHooks[key]) {\n\t\t\tthis.changeHooks[key].push(func)\n\t\t} else {\n\t\t\tthis.changeHooks[key] = [func]\n\t\t}\n\t}\n\n\t// Execute handlers hooked into key change, if any\n\tprivate execChangeHooks(key: string, val: any) {\n\t\tconst hooks = this.changeHooks[key]\n\t\tif (!hooks) {\n\t\t\treturn\n\t\t}\n\t\tfor (let func of hooks) {\n\t\t\tfunc(val)\n\t\t}\n\t}\n\n\t// Remove the model from its collection, detach all references and allow to\n\t// be garbage collected.\n\tremove() {\n\t\tif (this.collection) {\n\t\t\tthis.collection.remove(this)\n\t\t}\n\t\tdelete this.changeHooks\n\t\tdelete this.attrs\n\t\tfor (let view of this.views) {\n\t\t\tview.remove()\n\t\t}\n\t}\n\n\t// Attach a view to the model. Each model can have several views attached to\n\t// it.\n\tattach(view: View) {\n\t\tthis.views.add(view)\n\t}\n\n\t// Detach a view from the model\n\tdetach(view: View) {\n\t\tthis.views.delete(view)\n\t}\n}\n"],"sourceRoot":"/source/"}