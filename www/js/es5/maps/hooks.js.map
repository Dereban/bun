{"version":3,"sources":["hooks.js","hooks.ts"],"names":["System","register","exports_1","context_1","hook","name","func","hooks","push","trigger","param","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","id","setters","execute"],"mappings":"AAAA,YAAAA,QAAOC,YAAa,SAASC,EAAWC,GCWxC,QAAAC,GAAqBC,EAAcC,GAClC,GAAMF,GAAOG,EAAMF,EACdD,GAGJA,EAAKI,KAAKF,GAFVC,EAAMF,IAASC,GAOjB,QAAAG,GAAwBJ,EAAcK,GACrC,GAAMN,GAAOG,EAAMF,EACnB,IAAKD,EAAL,CDFO,GAAIO,IAA4B,EAC5BC,GAAoB,EACpBC,EAAiBC,MAErB,KCCP,IAAA,GAAqBC,GAArBC,EAAiBZ,EAAIa,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAE,CDCR,GCDNL,GAAIS,EAAAM,KACZf,GAAKI,IDIG,MAAOY,GACLV,GAAoB,EACpBC,EAAiBS,EACnB,QACE,KACSX,GAA6BK,EAAAA,WAC9BA,EAAAA,YAEN,QACE,GAAIJ,EACA,KAAMC,MAvCtB,GCMSN,EDNUJ,IAAaA,EAAUoB,EAsB1C,OCbJrB,GAAA,OAAAE,GAUAF,EAAA,UAAAO,IDIQe,WACAC,QAAS,WClBJvB,EAAA,QAAAK","file":"hooks.js","sourcesContent":["System.register([], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var hooks;\n    function hook(name, func) {\n        const hook = hooks[name];\n        if (!hook) {\n            hooks[name] = [func];\n        }\n        else {\n            hook.push(func);\n        }\n    }\n    exports_1(\"hook\", hook);\n    function trigger(name, param) {\n        const hook = hooks[name];\n        if (!hook) {\n            return;\n        }\n        for (let func of hook) {\n            func(param);\n        }\n    }\n    exports_1(\"trigger\", trigger);\n    return {\n        setters:[],\n        execute: function() {\n            exports_1(\"hooks\", hooks = {});\n        }\n    }\n});\n","/*\n Hooks for optional modules to execute code in exposed functions\n*/\n\ntype Hook = (arg?: any) => any\ntype HookMap = {[key: string]: Hook[]}\n\n// Hooks for optional handlers\nexport const hooks: HookMap = {}\n\n// Assigns a handler to execute on a hook name\nexport function hook(name: string, func: Hook) {\n\tconst hook = hooks[name]\n\tif (!hook) {\n\t\thooks[name] = [func]\n\t} else {\n\t\thook.push(func)\n\t}\n}\n\n// Execute all handlers for a hook\nexport function trigger(name: string, param?: any) {\n\tconst hook = hooks[name]\n\tif (!hook) {\n\t\treturn\n\t}\n\tfor (let func of hook) {\n\t\tfunc(param)\n\t}\n}\n"],"sourceRoot":"/source/"}