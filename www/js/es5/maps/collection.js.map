{"version":3,"sources":["collection.js","collection.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","System","register","exports_1","context_1","id","setters","execute","Collection","models","this","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","model","value","add","err","collection","fn"],"mappings":"AAAA,YAIA,SAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,KAFjiBkB,QAAOC,YAAa,SAASC,EAAWC,GAEjBA,GAAaA,EAAUC,EAE1C,QACIC,WACAC,QAAS,WAQL,GCXZC,GAAA,WAIC,QAJDA,GAIaC,GACX,GDQkB5B,gBAAgB6B,KCbpCF,GACCE,KAAAD,UAIKA,EAAQ,CDYU,GAAIE,IAA4B,EAC5BC,GAAoB,EACpBC,EAAiBC,MAErB,KCfrB,IAAA,GAAwBC,GAAxBC,EAAkBP,EAAMQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAE,CDiBG,GCjBpBU,GAAKN,EAAAO,KACbZ,MAAKa,IAAIF,IDoBa,MAAOG,GACLZ,GAAoB,EACpBC,EAAiBW,EACnB,QACE,KACSb,GAA6BK,EAAAA,WAC9BA,EAAAA,YAEN,QACE,GAAIJ,EACA,KAAMC,MAyC1B,MAlCA5B,cC5ChBuB,ID6CoBX,IAAK,MACLyB,MAAO,SCjCtBjB,GACH,MAAOK,MAAKD,OAAOJ,MDoCDR,IAAK,MACLyB,MAAO,SCjCtBD,GACHX,KAAKD,OAAOY,EAAMhB,IAAMgB,EACxBA,EAAMI,WAAaf,QDoCDb,IAAK,SACLyB,MAAO,SCjCnBD,SACCX,MAAKD,OAAOY,EAAMhB,UAClBgB,GAAMI,cDoCK5B,IAAK,QACLyB,MAAO,WChCzB,IAAK,GAAIjB,KAAMK,MAAKD,aACZC,MAAKD,OAAOJ,GAAIoB,UAExBf,MAAKD,aDoCaZ,IAAK,UACLyB,MAAO,SCjClBI,GACP,IAAK,GAAIrB,KAAMK,MAAKD,OACnBiB,EAAGhB,KAAKD,OAAOJ,QAxClBG,IAAAL,GAAA,UAAAK","file":"collection.js","sourcesContent":["System.register([], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var Collection;\n    return {\n        setters:[],\n        execute: function() {\n            class Collection {\n                constructor(models) {\n                    this.models = {};\n                    if (models) {\n                        for (let model of models) {\n                            this.add(model);\n                        }\n                    }\n                }\n                get(id) {\n                    return this.models[id];\n                }\n                add(model) {\n                    this.models[model.id] = model;\n                    model.collection = this;\n                }\n                remove(model) {\n                    delete this.models[model.id];\n                    delete model.collection;\n                }\n                clear() {\n                    for (let id in this.models) {\n                        delete this.models[id].collection;\n                    }\n                    this.models = {};\n                }\n                forEach(fn) {\n                    for (let id in this.models) {\n                        fn(this.models[id]);\n                    }\n                }\n            }\n            exports_1(\"default\", Collection);\n        }\n    }\n});\n","import Model from './model'\n\n// Holds a collection of models\nexport default class Collection<M extends Model> {\n\tmodels: {[key: string]: M} = {}\n\n\t// Creates a new Collection instance, with optional starting set of models\n\tconstructor(models?: M[]) {\n\t\tif (models) {\n\t\t\tfor (let model of models) {\n\t\t\t\tthis.add(model)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Retrieve a model by its ID\n\tget(id: number): M {\n\t\treturn this.models[id]\n\t}\n\n\t// Add model to collection\n\tadd(model: M) {\n\t\tthis.models[model.id] = model\n\t\tmodel.collection = this\n\t}\n\n\t// Remove model from the collection\n\tremove(model: M) {\n\t\tdelete this.models[model.id]\n\t\tdelete model.collection\n\t}\n\n\t// Remove all models from collection\n\tclear() {\n\t\tfor (let id in this.models) {\n\t\t\tdelete this.models[id].collection\n\t\t}\n\t\tthis.models = {}\n\t}\n\n\t// Runs the suplied function for each model in the collection\n\tforEach(fn: (model: M) => void) {\n\t\tfor (let id in this.models) {\n\t\t\tfn(this.models[id])\n\t\t}\n\t}\n}\n"],"sourceRoot":"/source/"}