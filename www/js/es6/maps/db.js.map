{"version":3,"sources":["db.ts"],"names":[],"mappings":";;;QAIM,SAAS,EAEJ,EAAE;IAUb;QACC,MAAM,CAAC,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM;YACxC,MAAM,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAA;YAC7C,CAAC,CAAC,OAAO,GAAG,MACX,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;YAChB,CAAC,CAAC,SAAS,GAAG;gBACb,gBAAA,EAAE,GAAG,CAAC,CAAC,MAAM,CAAA,CAAA;gBACb,EAAE,CAAC,OAAO,GAAG,GAAG;oBACf,MAAM,GAAG,CAAA;gBACV,CAAC,CAAA;gBACD,OAAO,EAAE,CAAA;YACV,CAAC,CAAA;YACD,CAAC,CAAC,eAAe,GAAG,KAAK;gBACxB,MAAM,EAAE,GAAG,CAAC,CAAC,MAAqB,CAAA;gBAIlC,MAAM,KAAK,GAAG,EAAE,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAA;gBAE5D,KAAK,CAAC,GAAG,CAAC,EAAC,EAAE,EAAE,MAAM,EAAC,CAAC,CAAA;gBACvB,KAAK,CAAC,GAAG,CAAC,EAAC,EAAE,EAAE,QAAQ,EAAC,CAAC,CAAA;gBAIzB,EAAE,CAAC,iBAAiB,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAA;gBAGhD,EAAE,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAA;YAChD,CAAC,CAAA;QACF,CAAC,CAAC,CAAA;IACH,CAAC;IA9BD,uBA8BC,CAAA;;;;YA1CK,SAAS,GAAG,CAAC,CAAA;YAKnB,UAAU,CAAC,SAAS,CAAC,IAAI,GAAG;gBAC3B,MAAM,CAAC,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM;oBACvC,IAAI,CAAC,OAAO,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;oBACvC,IAAI,CAAC,SAAS,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;gBAC5C,CAAC,CAAC,CAAA;YACH,CAAC,CAAA","file":"db.js","sourcesContent":["/*\n IndexedDB database controller\n*/\n\nconst dbVersion = 2\n\nexport let db: IDBDatabase\n\n// Execute a database request as a promise\nIDBRequest.prototype.exec = function (): Promise<any> {\n\treturn new Promise<any>((resolve, reject) => {\n\t\tthis.onerror = () => reject(this.error)\n\t\tthis.onsuccess = () => resolve(this.result)\n\t})\n}\n\nexport function open(): Promise<void> {\n\treturn new Promise<void>((resolve, reject) => {\n\t\tconst r = indexedDB.open('meguca', dbVersion)\n\t\tr.onerror = () =>\n\t\t\treject(r.error)\n\t\tr.onsuccess = () => {\n\t\t\tdb = r.result\n\t\t\tdb.onerror = err => {\n\t\t\t\tthrow err\n\t\t\t}\n\t\t\tresolve()\n\t\t}\n\t\tr.onupgradeneeded = event => {\n\t\t\tconst db = r.result as IDBDatabase\n\n\t\t\t// Various post number sets, like posts the user has made, posts\n\t\t\t// that have qouted the user, posts that have been hidded, etc.\n\t\t\tconst posts = db.createObjectStore('posts', {keyPath: 'id'})\n\n\t\t\tposts.add({id: 'mine'}) // Posts this client has made\n\t\t\tposts.add({id: 'hidden'}) // Posts this client has hidden\n\n\t\t\t// Chache of thread models, so we don't have to store JSON and\n\t\t\t// reparse it, when restoring to a previous state\n\t\t\tdb.createObjectStore('threads', {keyPath: 'id'})\n\n\t\t\t// Same for boards\n\t\t\tdb.createObjectStore('boards', {keyPath: 'id'})\n\t\t}\n\t})\n}\n"],"sourceRoot":"/source/"}