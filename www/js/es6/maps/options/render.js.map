{"version":3,"sources":["options/render.ts"],"names":[],"mappings":"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","file":"options/render.js","sourcesContent":["/*\n Renders the HTML of the options panel\n*/\n\nimport {filter, extend, groupBy} from 'underscore'\nimport {parseHTML, parseAttributes, ElementAttributes} from '../util'\nimport {opts as lang, OptLabel} from '../lang'\nimport {specs, OptionSpec, optionType} from './specs'\nimport {OptionID} from '../options'\n\n// Render the inner HTML of the options panel\nexport default function (): string {\n\tlet html = '<ul class=\"option_tab_sel\">'\n\tconst {tabs} = lang,\n\t\tbyTab = groupBy(specs, 'tab'),\n\t\topts: OptionSpec[][] = []\n\n\t// Render tab butts\n\tfor (let i = 0; i < tabs.length; i++) {\n\t\t// Pick the options for this specific tab, according to current\n\t\t// template and server configuration\n\t\topts[i] = filter<OptionSpec>(byTab[i], spec =>\n\t\t\t!spec.noLoad && !spec.hidden)\n\n\t\tif (!opts[i].length) {\n\t\t\tcontinue\n\t\t}\n\t\tconst attrs: ElementAttributes = {\n\t\t\t'data-content': `tab-${i}`,\n\t\t\tclass: 'tab_link'\n\t\t}\n\n\t\t// Highlight the first tabButt by default\n\t\tif (i === 0) {\n\t\t\tattrs['class'] += ' tab_sel'\n\t\t}\n\t\thtml += parseHTML\n\t\t\t`<li>\n\t\t\t\t<a ${parseAttributes(attrs)}>\n\t\t\t\t\t${tabs[i]}\n\t\t\t\t</a>\n\t\t\t</li>`\n\t}\n\n\thtml += '</ul><ul class=\"option_tab_cont\">'\n\tfor (let i = 0; i < opts.length; i++) {\n\t\thtml += renderTab(opts[i], i)\n\t}\n\thtml += '</ul>'\n\n\treturn html\n}\n\n// Render tab contents\nfunction renderTab(opts: OptionSpec[], i: number): string {\n\tif (!opts.length) {\n\t\treturn ''\n\t}\n\tlet html = ''\n\thtml += `<li class=\"tab-${i}`\n\n\t// Show the first tab by default\n\tif (i === 0) {\n\t\thtml += ' tab_sel'\n\t}\n\thtml += '\">'\n\n\t// Render the actual options\n\tfor (let opt of opts) {\n\t\thtml += renderOption(opt)\n\t}\n\n\tif (i === 0) {\n\t\thtml += renderExtras()\n\t}\n\thtml += '</li>'\n\n\treturn html\n}\n\n// Render a single option from it's schema\nfunction renderOption(spec: OptionSpec): string {\n\tswitch (spec.type) {\n\t\tcase optionType.shortcut:\n\t\t\treturn 'Alt+' + renderInput(spec.id, {maxlength: '1'})\n\t\tcase optionType.checkbox:\n\t\t\treturn renderInput(spec.id, {type: 'checkbox'})\n\t\tcase optionType.number:\n\t\t\treturn renderInput(spec.id, {\n\t\t\t\tstyle: 'width: 4em;',\n\t\t\t\tmaxlength: '4'\n\t\t\t})\n\t\tcase optionType.image:\n\t\t\treturn renderInput(spec.id, {type: 'file'})\n\t\tcase optionType.menu:\n\t\t\treturn renderMenu(spec)\n\t}\n}\n\n// Common input field render logic\nfunction renderInput(id: OptionID, attrs: ElementAttributes): string {\n\tconst [label, title] = lang.labels[id]\n\textend(attrs, {id, title})\n\treturn `<input ${parseAttributes(attrs)}>` + renderLabel(id, title, label)\n}\n\n// Render the description label to the right of the option\nfunction renderLabel(id: OptionID, title: string, label: string): string {\n\treturn parseHTML\n\t\t`<label for=\"${id}\" title=\"${title}\">\n\t\t\t${label}\n\t\t</label>\n\t\t<br>`\n}\n\n// Render drop down selection menu\nfunction renderMenu({id, list}: OptionSpec): string {\n\tconst [label, title] = lang.labels[id]\n\tlet html = `<select id=\"${id}\" title=\"${title}\">`\n\tfor (let item of list) {\n\t\thtml += parseHTML\n\t\t\t`<option value=\"${item}\">\n\t\t\t\t${lang.modes[item] || item}\n\t\t\t</option>`\n\t}\n\thtml += '</select>' + renderLabel(id, title, label)\n\treturn html\n}\n\n// Hidden post reset, Export and Import links to first tab\nfunction renderExtras(): string {\n\tlet html = '<br>'\n\tconst links = ['export', 'import', 'hidden']\n\tfor (let id of links) {\n\t\tconst [label, title] = lang.labels[id]\n\t\thtml += parseHTML\n\t\t\t`<a id=\"${id}\" title=\"${title}\">\n\t\t\t\t${label}\n\t\t\t</a> `\n\t}\n\n\t// Hidden file input for uploading the JSON\n\tconst attrs: ElementAttributes = {\n\t\ttype: 'file',\n\t\tid: 'importSettings',\n\t\tname: \"Import Settings\"\n\t}\n\thtml += `<input ${parseAttributes(attrs)}>`\n\n\treturn html\n}\n"],"sourceRoot":"/source/"}