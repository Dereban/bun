{"version":3,"sources":["hooks.ts"],"names":[],"mappings":";;;QAQa,KAAK;IAGlB,cAAqB,IAAY,EAAE,IAAU;QAC5C,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAA;QACxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACrB,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChB,CAAC;IACF,CAAC;IAPD,uBAOC,CAAA;IAGD,iBAAwB,IAAY,EAAE,KAAW;QAChD,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAA;QACxB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,MAAM,CAAA;QACP,CAAC;QACD,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,CAAA;QACZ,CAAC;IACF,CAAC;IARD,6BAQC,CAAA;;;;YArBY,mBAAA,KAAK,GAAY,EAAE,CAAA,CAAA","file":"hooks.js","sourcesContent":["/*\n Hooks for optional modules to execute code in exposed functions\n*/\n\ntype Hook = (arg?: any) => any\ntype HookMap = {[key: string]: Hook[]}\n\n// Hooks for optional handlers\nexport const hooks: HookMap = {}\n\n// Assigns a handler to execute on a hook name\nexport function hook(name: string, func: Hook) {\n\tconst hook = hooks[name]\n\tif (!hook) {\n\t\thooks[name] = [func]\n\t} else {\n\t\thook.push(func)\n\t}\n}\n\n// Execute all handlers for a hook\nexport function trigger(name: string, param?: any) {\n\tconst hook = hooks[name]\n\tif (!hook) {\n\t\treturn\n\t}\n\tfor (let func of hook) {\n\t\tfunc(param)\n\t}\n}\n"],"sourceRoot":"/source/"}