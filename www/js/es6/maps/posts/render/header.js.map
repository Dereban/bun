{"version":3,"sources":["posts/render/header.ts"],"names":[],"mappings":"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","file":"posts/render/header.js","sourcesContent":["import {escape} from 'underscore'\nimport {parseHTML, parseAttributes, pad, ElementAttributes} from '../../util'\nimport {config} from '../../state'\nimport options from '../../options'\nimport {PostData} from '../models'\nimport {posts as lang, time as timeLang} from '../../lang'\n\n// Render the header with various post informationt\nexport function renderHeader(data: PostData): string {\n\tconst {id, op, subject} = data,\n\t\tpostURL = renderPostURL(id)\n\treturn parseHTML\n\t\t`<header>\n\t\t\t<input type=\"checkbox\" class=\"postCheckbox\">\n\t\t\t${subject ? `<h3>「${escape(data.subject)}」</h3>` : ''}\n\t\t\t${renderName(data)}\n\t\t\t${renderTime(data.time)}\n\t\t\t<nav>\n\t\t\t\t<a href=\"${postURL}\" class=\"history\">\n\t\t\t\t\tNo.\n\t\t\t\t</a>\n\t\t\t\t<a href=\"${postURL}\" class=\"quote\">\n\t\t\t\t\t${id.toString()}\n\t\t\t\t</a>\n\t\t\t</nav>\n\t\t</header>\n\t\t<span class=\"oi control\" data-glyph=\"chevron-bottom\"></span>`\n}\n\n// Render the name of a post's poster\nexport function renderName(data: PostData): string {\n\tlet html = '<b class=\"name'\n\tconst {auth, email} = data\n\tif (auth) {\n\t\thtml += ` ${auth === 'admin' ? 'admin' : 'moderator'}`\n\t}\n\thtml += '\">'\n\tif (email) {\n\t\tconst attrs: ElementAttributes = {\n\t\t\tclass: 'email',\n\t\t\thref: 'mailto:' + encodeURI(email),\n\t\t\ttarget: 'blank'\n\t\t}\n\t\thtml += `<a ${parseAttributes(attrs)}>`\n\t}\n\thtml += resolveName(data)\n\tif (email) {\n\t\thtml += '</a>'\n\t}\n\thtml += '</b>'\n\treturn html\n}\n\n// Determine the name and tripcode combination to render\nfunction resolveName(data: PostData): string {\n\tlet html = ''\n\tconst {trip, name, auth} = data\n\tif (name || !trip) {\n\t\tif (name) {\n\t\t\thtml += escape(name)\n\t\t} else {\n\t\t\thtml += lang.anon\n\t\t}\n\t\tif (trip) {\n\t\t\thtml += ' '\n\t\t}\n\t}\n\tif (trip) {\n\t\thtml += `<code>${escape(trip)}</code>`\n\t}\n\tif (auth) { // Render staff title\n\t\tlet alias: string\n\t\tif (auth in config.staff.classes) {\n\t\t\talias = config.staff.classes[auth].alias\n\t\t} else {\n\t\t\talias = auth\n\t\t}\n\t\thtml += ` ## ${alias}`\n\t}\n\treturn html\n}\n\n// TODO: Resolve, once moderation implemented\n// // Renders a poster identification mnemonic\n// export function renderMnemonic(mnemonic) {\n// \treturn `<b class=\"mod addr\">${mnem}</b>`\n// }\n\n// Renders a time element. Can be either absolute or relative.\nexport function renderTime(time: number): string {\n\t// Format according to client's relative post timestamp setting\n\tlet title: string,\n\t\ttext :string\n\tconst readable = readableTime(time)\n\tif (options.get('relativeTime')) {\n\t\ttitle = readable\n\t\ttext = relativeTime(time, Date.now())\n\t}\n\treturn parseHTML\n\t\t`<time title=\"${title}\">\n\t\t\t${text || readable}\n\t\t</time>`\n}\n\n// Renders classic absolute timestamp\nfunction readableTime(time: number): string {\n\tlet d = new Date(time)\n\treturn pad(d.getDate()) + ' '\n\t\t+ timeLang.year[d.getMonth()] + ' '\n\t\t+ d.getFullYear()\n\t\t+ `(${timeLang.week[d.getDay()]})`\n\t\t+`${pad(d.getHours())}:${pad(d.getMinutes())}`\n}\n\n// Renders readable elapsed time since post\nfunction relativeTime(then: number, now: number): string {\n\tlet time = Math.floor((now - then) / 60000),\n\t\tisFuture = false\n\tif (time < 1) {\n\t\tif (time > -5) { // Assume to be client clock imprecission\n\t\t\treturn timeLang.justNow\n\t\t}\n\t\telse {\n\t\t\tisFuture = true\n\t\t\ttime = -time\n\t\t}\n\t}\n\n\tconst divide = [60, 24, 30, 12],\n\t\tunit = ['minute', 'hour', 'day', 'month']\n\tfor (let i = 0; i < divide.length; i++) {\n\t\tif (time < divide[i]) {\n\t\t\treturn ago(time, timeLang[unit[i]] as string[], isFuture)\n\t\t}\n\t\ttime = Math.floor(time / divide[i])\n\t}\n\n\treturn ago(time, timeLang.year, isFuture)\n}\n\n// Renders \"56 minutes ago\" or \"in 56 minutes\" like relative time text\nfunction ago(time: number, units: string[], isFuture: boolean): string {\n\tlet text = units[time > 1 ? 1 : 0]\n\tif (isFuture) {\n\t\ttext += `${timeLang.in} ${text}`\n\t} else {\n\t\ttext += ` ${timeLang.ago}`\n\t}\n\treturn text\n}\n\n// Render an anchor that points to the target post number\nexport function renderPostURL(id: number): string {\n\treturn `#p${id}`\n}\n"],"sourceRoot":"/source/"}