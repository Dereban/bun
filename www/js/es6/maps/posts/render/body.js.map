{"version":3,"sources":["posts/render/body.ts"],"names":[],"mappings":"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","file":"posts/render/body.js","sourcesContent":["import {config} from '../../state'\nimport {escape} from 'underscore'\nimport {renderPostLink} from './etc'\nimport {PostData, PostLinks} from '../models'\n\n// Render the text body of a post\nexport function renderBody(data: PostData): string {\n\tif (!data.state) {\n\t\t// Initial post state [new_line, no_qoute, no_spoiler]\n\t\tdata.state = [0, 0, 0]\n\t}\n\tlet html = renderFragment(data.body, data)\n\tif (data.state[1]) { // Close quote on post end\n\t\thtml += '</em>'\n\t}\n\tif (data.state[2]) { // Same with spoilers\n\t\thtml += '</del>'\n\t}\n\treturn html\n}\n\n// Parse commited text body fragment\nexport function renderFragment(frag: string, data: PostData): string {\n\tconst lines = frag.split('\\n'),\n\t\t{state} = data\n\tlet html = ''\n\tfor (let i = 0; i < lines.length; i++) {\n\t\t// Start a new line\n\t\tif (state[0] && i % 2) {\n\t\t\t// Close quoute\n\t\t\tif (state[1] % 2) {\n\t\t\t\thtml += '</em>'\n\t\t\t\tstate[1]++\n\t\t\t}\n\t\t\thtml += '<br>'\n\t\t\tstate[0] = 0\n\t\t}\n\n\t\t// Quote or line starts with link/embed\n\t\tconst line = lines[i]\n\t\tif (!state[0] && line.startsWith('>')) {\n\t\t\thtml += '<em>'\n\t\t\tstate[1]++\n\t\t}\n\n\t\t// Bodies may be empty\n\t\tif (frag) {\n\t\t\tfor (let word of line.split(' ')) {\n\t\t\t\thtml += parseWord(word, data)\n\t\t\t\tstate[0] = 1\n\t\t\t}\n\t\t}\n\t}\n\treturn html\n}\n\n// Convert a word to it's appropriate HTML representation\nfunction parseWord(word: string, data: PostData): string {\n\t// `[spoiler]` and `[/spoiler]` are treated the same way. You can't nest\n\t// them.\n\tconst split = word.split(/\\[\\/?spoiler]/i)\n\tlet html = ''\n\tfor (let i = 0; i < split.length; i++) {\n\t\t// Insert spoiler tags\n\t\tif (i % 2) {\n\t\t\thtml += `<${data.state[2]++ % 2 ? '/' : ''}del>`\n\n\t\t\t// TODO: Do we need special logic for postForms here?\n\t\t}\n\n\t\tconst bit = split[i]\n\t\tif (/^>>\\d+$/.test(bit)) {\n\t\t\t// Post links\n\t\t\thtml += parsePostLink(bit, data.links)\n\t\t} else if (/^>>>\\/\\w+\\//.test(bit)) {\n\t\t\t// Internal and custom reference URLs\n\t\t\thtml += parseReference(bit)\n\t\t} else if (/^https?:\\/\\/[^-A-Za-z0-9+&@#/%?=~_]$/.test(bit)) {\n\t\t\t// Generic URLs\n\t\t\thtml += parseURL(bit)\n\t\t} else if (/<strong>.+<\\/strong>/.test(bit)) {\n\t\t\t// Hash command results. Already verified server-side.\n\t\t\thtml += bit\n\t\t} else {\n\t\t\thtml += escape(bit)\n\t\t}\n\t}\n\treturn html\n}\n\n// Verify and render a link to other posts\nfunction parsePostLink(bit: string, links: PostLinks): string {\n\tif (!links) {\n\t\treturn bit\n\t}\n\tconst num = parseInt(bit.match(/^>>\\/(\\d+)$/)[1]),\n\t\tverified = links[num]\n\tif (!verified) {\n\t\treturn bit\n\t}\n\treturn renderPostLink(num, verified.board, verified.op)\n}\n\n// Generate all possible refference name and link pairs\nconst refTargets: {[ref: string]: string} = {},\n\t{boards} = config\nfor (let board of boards.enabled) {\n\trefTargets[board] = `../${board}/`\n}\nfor (let [name, link] of boards.psuedo.concat(boards.links)) {\n\trefTargets[name] = link\n}\n\n// Parse internal or customly set reference URL\nfunction parseReference(bit: string): string {\n\tconst name = bit.match(/^>>>\\/(\\w+)\\/$/)[1],\n\t\thref = refTargets[name]\n\tif (!href) {\n\t\treturn bit\n\t}\n\treturn newTabLink(href, bit)\n}\n\n// Render and anchor link that opens in a new tab\nfunction newTabLink(href: string, text: string): string {\n\treturn `<a href=\"${href}\" target=\"_blank\">${text}</a>`\n}\n\n// Render generic URLs and embed, if aplicable\nfunction parseURL(bit: string): string {\n\n\t// TODO: Embeds\n\n\treturn newTabLink(encodeURI(bit), bit)\n}\n"],"sourceRoot":"/source/"}