{"version":3,"sources":["posts/render/etc.ts"],"names":[],"mappings":";;;;IAUA,wBAA+B,GAAW,EAAE,KAAa,EAAE,EAAU;QACpE,IAAI,IAAI,GAAG,IAAI,CAAA;QACf,EAAE,CAAC,CAAC,KAAK,KAAK,YAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,IAAI,KAAK,KAAK,GAAG,CAAA;QACtB,CAAC;QACD,IAAI,IAAI,GAAG,CAAA;QACX,EAAE,CAAC,CAAC,YAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,IAAI,GAAG,GAAG,YAAI,CAAC,GAAG,CAAA;QACvB,CAAC;QACD,MAAM,MAAM,GAAG,YAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACjC,EAAE,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC;YACnB,IAAI,IAAI,SAAS,CAAA;QAClB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,GAAG,GAAG,YAAI,CAAC,EAAE,CAAA;QACtB,CAAC;QACD,MAAM,CAAC,UAAU,CAAC,IAAI,KAAK,IAAI,EAAE,IAAI,GAAG,EAAE,EAAE,IAAI,CAAC,CAAA;IAClD,CAAC;IAhBD,2CAgBC,CAAA;IAGD,oBAAoB,IAAY,EAAE,IAAY;QAC7C,MAAM,CAAC,gBAAS,CACf,4BAA4B,IAAI;KAC7B,IAAI;OACF,CAAA;IACP,CAAC;IAoBD,yBAAgC,KAAgB;QAC/C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,EAAE,CAAA;QACV,CAAC;QACD,IAAI,IAAI,GAAG,EAAE,CAAA;QACb,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,KAAK,CAAC,CAAC,CAAC;YACtB,MAAM,EAAC,KAAK,EAAE,EAAE,EAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAA;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,IAAI,IAAI,GAAG,CAAA;YACZ,CAAC;YACD,IAAI,IAAI,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC,CAAA;QAChD,CAAC;QACD,MAAM,CAAC,IAAI,CAAA;IACZ,CAAC;IAbD,6CAaC,CAAA","file":"posts/render/etc.js","sourcesContent":["/*\n Miscalleneous post component rendering functions\n*/\n\nimport {page, mine} from '../../state'\nimport {posts as lang} from '../../lang'\nimport {parseHTML} from '../../util'\nimport {PostLinks} from '../models'\n\n// Render a link to other posts\nexport function renderPostLink(num: number, board: string, op: number): string {\n\tlet text = '>>'\n\tif (board !== page.get('board')) { // Cross-board\n\t\ttext += `>/${board}/`\n\t}\n\ttext += num\n\tif (mine.has(num)) { // Post, I made\n\t\ttext += ' ' + lang.you\n\t}\n\tconst thread = page.get('thread')\n\tif (op !== thread) { // Cross-thread\n\t\ttext += ' \\u27a1'\n\t} else if (num == thread) { // OP post of this thread\n\t\ttext += ' ' + lang.OP\n\t}\n\treturn postAnchor(`/${board}/${op}#${num}`, text)\n}\n\n// Render the anchor element of a post link\nfunction postAnchor(href: string, text: string): string {\n\treturn parseHTML\n\t\t`<a class=\"history\" href=\"${href}\">\n\t\t\t${text}\n\t\t</a>`\n}\n\n// TODO: Reimplement, when moderation done\n\n// Render USER WAS BANNED FOR THIS POST message, or similar\n// export function renerBanned(): string {\n// \treturn `<b class=\"admin banMessage\">${lang.mod.banMessage}</b>`\n// }\n//\n// Render moderation information. Only exposed to authenticated staff.\n// export function renderModInfo(info) {\n// \tlet html = '<b class=\"modLog admin\">'\n// \tfor (let action of info) {\n// \t\thtml += `${lang.mod.formatLog(action)}<br>`\n// \t}\n// \thtml += '</b>'\n// \treturn html\n// }\n\n// Render links to posts that are linking to the target post\nexport function renderBacklinks(links: PostLinks): string {\n\tif (!links) {\n\t\treturn ''\n\t}\n\tlet html = ''\n\tfor (let id in links) {\n\t\tconst {board, op} = links[id]\n\t\tif (html) {\n\t\t\thtml += ' '\n\t\t}\n\t\thtml += renderPostLink(parseInt(id), board, op)\n\t}\n\treturn html\n}\n"],"sourceRoot":"/source/"}