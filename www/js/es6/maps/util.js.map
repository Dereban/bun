{"version":3,"sources":["util.ts"],"names":[],"mappings":"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","file":"util.js","sourcesContent":["/*\n Utuility functions.\n*/\n\n// Fetches a JSON response from the API and returns a Promise\nexport function fetchJSON(url: string): Promise<Object> {\n\treturn fetch(\"api/\" + url).then(res => res.json())\n}\n\n// Generate a random alphannumeric string of lower and upper case hexadecimal\n// characters\nexport function randomID(len: number): string {\n\tlet id = ''\n\tfor (let i = 0; i < len; i++) {\n\t\tlet char = (Math.random() * 36).toString(36)[0]\n\t\tif (Math.random() < 0.5) {\n\t\t\tchar = char.toUpperCase()\n\t\t}\n\t\tid += char\n\t}\n\treturn id\n}\n\n// Simple map of sets with automatic array creation and removal\nexport class SetMap<V> {\n\tprivate map: {[key: string]: Set<V>} = {}\n\n\t// Add item to key\n\tadd(key: string, item: V) {\n\t\tif (!(key in this.map)) {\n\t\t\tthis.map[key] = new Set()\n\t\t}\n\t\tthis.map[key].add(item)\n\t}\n\n\t// Remove and item from a key\n\tremove(key: string, item: V) {\n\t\tconst set = this.map[key]\n\t\tif (!set) {\n\t\t\treturn\n\t\t}\n\t\tset.delete(item)\n\t\tif (set.size === 0) {\n\t\t\tdelete this.map[key]\n\t\t}\n\t}\n\n\t// Execute a function for each item under a key\n\tforEach(key: string, fn: (item: V) => void) {\n\t\tconst set = this.map[key]\n\t\tif (!set) {\n\t\t\treturn\n\t\t}\n\t\tset.forEach(fn)\n\t}\n}\n\n// Retrieve post number of post element\nexport function getNum(el: Element): number {\n\tif (!el) {\n\t\treturn 0\n\t}\n\treturn parseInt(el.getAttribute('id').slice(1), 10)\n}\n\n// Retrieve post number of closest parent post element\nexport function getID(el: Element): number {\n\tif (!el) {\n\t\treturn 0\n\t}\n\treturn getNum(el.closest('article, section'))\n}\n\n// Parse HTML string to node array\nexport function parseEls(DOMString: string): Node[] {\n\tconst el = document.createElement('div')\n\tel.innerHTML = DOMString\n\treturn Array.from(el.childNodes)\n}\n\n// Parse HTML string to a single Node\nexport function parseEl(DOMString: string): Node {\n\tconst el = document.createElement('div')\n\tel.innerHTML = DOMString\n\treturn el.firstChild\n}\n\n// Add an event listener that filters targets according to a CSS selector\nexport function on(\n\tel: Element,\n\ttype: string,\n\tselector: string,\n\tfn: EventListener\n) {\n\tel.addEventListener(type, event => {\n\t\tif (event.target.matches(selector)) {\n\t\t\tfn(event)\n\t\t}\n\t})\n}\n\n// Add event listener to element, that will only be executed once with a\n// specific tartget.\nexport function once(\n\tel: Element,\n\ttype: string,\n\tselector: string,\n\tfn: EventListener\n) {\n\tel.addEventListener(type, event => {\n\t\tif (event.target.matches(selector)) {\n\t\t\tfn(event)\n\t\t\tel.removeEventListener(type, fn)\n\t\t}\n\t})\n}\n\n// Add event listener to element, that will only be executed once\nexport function onceAll(el: Element, type: string, fn: EventListener) {\n\tel.addEventListener(type, event => {\n\t\tfn(event)\n\t\tel.removeEventListener(type, fn)\n\t})\n}\n\n// Return width of element with padding and margin\nexport function outerWidth(el: Element): number {\n\tconst style =  getComputedStyle(el)\n\tconst widths = [\n\t\tstyle.marginLeft, style.marginRight, style.paddingLeft,\n\t\tstyle.paddingRight\n\t]\n\tlet total = 0\n\tfor (let width of widths) {\n\t\ttotal += parseInt(width)\n\t}\n\treturn total\n}\n\n// Confirms email is saging\nexport function isSage(email: string) :boolean {\n\tif (email) {\n\t\treturn email.trim() === 'sage'\n\t}\n\treturn false\n}\n\n// Pad an integer with a leading zero, if below 10\nexport function pad(n: number): string {\n\treturn (n < 10 ? '0' : '') + n\n}\n\n// Template string tag function for HTML. Strips indentation and trailing\n// newlines. Based on https://gist.github.com/zenparsing/5dffde82d9acef19e43c\nexport function parseHTML(callSite: string[], ...args: string[]): string {\n\tlet output = callSite[0]\n\tfor (let i = 1; i <= args.length; i++) {\n\t\toutput += args[i - 1] + callSite[i]\n\t}\n\n\t// Strip indentation and remove empty lines from HTML string\n\treturn output.replace(/\\s*\\n\\s*/g, '')\n}\n\nexport type ElementAttributes = {[key: string]: string}\n\n// Generate an HTML element attribute list. If a key has an empty string, it's\n// value will be considered \"true\"\nexport function parseAttributes(attrs: ElementAttributes): string {\n\tlet html = ''\n\tfor (let key in attrs) {\n\t\thtml += ' '\n\t\tconst val = attrs[key]\n\t\tif (val) {\n\t\t\thtml += `${key}=\"${val}\"`\n\t\t} else {\n\t\t\thtml += key\n\t\t}\n\t}\n\treturn html\n}\n\n// Makes a ', ' seperated list\nexport function commaList(items: string[]): string {\n\tlet html = ''\n\tfor (let item of items) {\n\t\tif (html) {\n\t\t\thtml += ', '\n\t\t}\n\t\thtml += item\n\t}\n\treturn html\n}\n"],"sourceRoot":"/source/"}