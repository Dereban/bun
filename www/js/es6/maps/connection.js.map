{"version":3,"sources":["connection.ts"],"names":[],"mappings":"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","file":"connection.js","sourcesContent":["/*\n Handles Websocket connectivity\n*/\n\nimport FSM from './fsm'\nimport {debug} from './state'\nimport {sync as lang} from './lang'\n\n// Message types of the WebSocket communication protocol\nexport const message: {[type: string]: number} = {\n\n}\n\nexport type MessageHandler = (data: ArrayBuffer) => void\n\n// Websocket message handlers. Each handler responds to its distinct message\n// type.\nexport const handlers: {[type: number]: MessageHandler} = {}\n\n// Websocket connection and syncronisation with server states\nconst enum syncStatus {disconnected, connecting, syncing, synced, desynced}\n\n// States of the connection finite state machine\nexport const enum connState {\n\tloading, connecting, syncing, synced, reconnecting, dropped, desynced\n}\n\n// Events passable to the connection FSM\nexport const enum connEvent {\n\tstart, open, close, retry, error\n}\n\n// Finite state machine for managing websocket connectivity\nexport const connSM = new FSM<connState, connEvent>(connState.loading)\n\nlet socket: WebSocket,\n\tattempts: number,\n\tattemptTimer: number\n\n// Send a message to the server\nexport function send(msg: ArrayBuffer) {\n\tif (connSM.state !== connState.synced\n\t\t&& connSM.state !== connState.syncing\n\t) {\n\t\treturn\n\t}\n\tif (socket.readyState !== 1) {\n\t\tconsole.warn(\"Attempting to send while socket closed\")\n\t\treturn\n\t}\n\tif (debug) {\n\t\tconsole.log('<', msg)\n\t}\n\tsocket.send(msg)\n}\n\n// Routes messages from the server to the respective handler\nfunction onMessage({data}: MessageEvent) {\n\tif (debug) {\n\t\tconsole.log('>', data)\n\t}\n\tconst handler = handlers[data[0]]\n\tif (handler) {\n\t\thandler(data.slice(1))\n\t}\n}\n\nconst syncEl = document.getElementById('sync')\n\n// Render connction status indicator\nfunction renderStatus(status: syncStatus) {\n\tsyncEl.textContent = lang[status]\n}\n\nconnSM.act([connState.loading], connEvent.start, connState.connecting, () => {\n\trenderStatus(syncStatus.connecting)\n\tattempts = 0\n\tconnect()\n})\n\nconst path = (location.protocol === 'https' ? 'wss' : 'ws')\n\t+ `://${location.host}/socket`\n\nfunction connect() {\n\tnullSocket()\n\tif (window.location.protocol == 'file:') {\n\t\tconsole.error(\"Page downloaded locally. Refusing to sync.\")\n\t\treturn\n\t}\n\tsocket = new WebSocket(path)\n\tsocket.binaryType = \"arraybuffer\"\n\tsocket.onopen = connSM.feeder(connEvent.open)\n\tsocket.onclose = connSM.feeder(connEvent.close)\n\tsocket.onmessage = onMessage\n\tsocket.onerror = onError\n\tif (debug) {\n\t\t(window as any).socket = socket\n\t}\n}\n\nfunction onError(err: Event) {\n\tconsole.error(err)\n}\n\n// Strip all handlers and remove references from Websocket instance\nfunction nullSocket() {\n\tif (socket) {\n\t\tsocket.onclose\n\t\t\t= socket.onmessage\n\t\t\t= socket.onopen\n\t\t\t= socket.onclose\n\t\t\t= socket.onerror\n\t\t\t= null\n\t}\n}\n\nconnSM.act(\n\t[connState.connecting, connState.reconnecting],\n\tconnEvent.open,\n\tconnState.syncing,\n\t() => {\n\t\trenderStatus(syncStatus.connecting)\n\t\tattemptTimer = setTimeout(() => resetAttempts(), 10000)\n\t}\n)\n\n// Reset the reconnection attempt counter and timers\nfunction resetAttempts() {\n\tif (attemptTimer) {\n\t\tclearTimeout(attemptTimer)\n\t\tattemptTimer = 0\n\t}\n\tattempts = 0\n}\n\nconnSM.wildAct(connEvent.close, connState.dropped, err => {\n\tnullSocket()\n\tif (debug) {\n\t\tconsole.error(err)\n\t}\n\tif (attemptTimer) {\n\t\tclearTimeout(attemptTimer)\n\t\tattemptTimer = 0\n\t}\n\trenderStatus(syncStatus.disconnected)\n\n\t// Wait maxes out at ~1min\n\tconst wait = 500 * Math.pow(\n\t\t1.5,\n\t\tMath.min(Math.floor(++attempts / 2), 12)\n\t)\n\tsetTimeout(connSM.feeder(connEvent.retry), wait)\n})\n\nconnSM.act([connState.dropped], connEvent.retry, connState.reconnecting, () => {\n\tconnect()\n\n\t// Don't show this immediately so we don't thrash on network loss\n\tsetTimeout(() => {\n\t\tif (connSM.state === connState.reconnecting) {\n\t\t\trenderStatus(syncStatus.connecting)\n\t\t}\n\t}, 100)\n})\n\nexport function start() {\n\tconnSM.feed(connEvent.start)\n}\n\n// Work arround browser slowing down/suspending tabs and keep the FSM up to date\n// with the actual status.\nfunction onWindowFocus() {\n\tif (connSM.state !== connState.desynced && navigator.onLine) {\n\t\tconnSM.feed(connEvent.retry)\n\t}\n}\n\ndocument.addEventListener('visibilitychange', event => {\n\tif (!(event.target as Document).hidden) {\n\t\tonWindowFocus()\n\t}\n})\n\nwindow.addEventListener('online', () => {\n\tresetAttempts()\n\tconnSM.feed(connEvent.retry)\n})\nwindow.addEventListener('offline', connSM.feeder(connEvent.close))\n"],"sourceRoot":"/source/"}