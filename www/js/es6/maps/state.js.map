{"version":3,"sources":["state.ts"],"names":[],"mappings":";;;;;;;;;;;;QAyDa,MAAM,EAGN,QAAQ,EAqBR,IAAI,EAGJ,OAAO,EACP,KAAK,EACL,MAAM,EACN,OAAO,EACP,QAAQ,EAGR,KAAK,EAGP,IAAI,EAcF,QAAQ,EAGR,KAAK,EAiBL,KAAK;IA3DlB,cAAc,IAAY;QACzB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC,EACjD,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,oCAAoC,CAAC,EACzD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAA;QACtC,MAAM,CAAC;YACN,OAAA,KAAK;YACL,MAAM,EAAE,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACxC,KAAK,EAAE,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;SACrC,CAAA;IACF,CAAC;IAmBD;;YACC,MAAM,OAAO,GAAG,MAAM,OAAE;iBACtB,WAAW,CAAC,OAAO,EAAE,UAAU,CAAC;iBAChC,WAAW,CAAC,OAAO,CAAC;iBACpB,GAAG,CAAC,MAAM,CAAC;iBACX,IAAI,EAAE,CAAA;YACR,OAAO,OAAO,CAAC,EAAE,CAAA;YACjB,kBAAA,IAAI,GAAG,IAAI,GAAG,CAAS,CAAC,OAAO,CAAC,CAAC,CAAA,CAAA;QAClC,CAAC;;IARD,mCAQC,CAAA;IASD,kBAAyB,EAAW;QACnC,MAAM,EAAE,GAAG,YAAK,CAAC,EAAE,CAAC,CAAA;QACpB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,IAAI,CAAA;QACZ,CAAC;QACD,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IACrB,CAAC;IAND,+BAMC,CAAA;IAGD,wBAA+B,OAAgB;QAC9C,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,GAAG,OAAO,GAAG,MAAM,CAAA;IACpD,CAAC;IAFD,2CAEC,CAAA;;;;;;;;;;;;;;;;YApEY,oBAAA,MAAM,GAAa,MAAc,CAAC,MAAM,CAAA,CAAA;YAGxC,sBAAA,QAAQ,GAAa,MAAc,CAAC,QAAQ,CAAA,CAAA;YAqB5C,kBAAA,IAAI,GAAG,IAAI,eAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA,CAAA;YAGrC,qBAAA,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA,CAAA;YACnC,mBAAA,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA,CAAA;YAC/B,oBAAA,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA,CAAA;YACjC,qBAAA,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,CAAA,CAAA;YACnC,sBAAA,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA,CAAA;YAG1C,mBAAA,KAAK,GAAG,IAAI,oBAAU,EAAQ,CAAA,CAAA;YAiB9B,sBAAA,QAAQ,GAAG,IAAI,GAAG,EAAU,CAAA,CAAA;YAG5B,mBAAA,KAAK,GAAG,EAAE,CAAA,CAAA;YAiBV,mBAAA,KAAK,GAAG,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAA,CAAA","file":"state.js","sourcesContent":["/*\n Stores the state of the web application\n*/\n\nimport Model from './model'\nimport {Post} from './posts/models'\nimport Collection from './collection'\nimport {getID} from './util'\nimport {db} from './db'\n\n// Allows us to typecheck configs. See config/defaults.json for more info.\ntype Configs = {\n\tboards: {\n\t\tenabled: string[]\n\t\tboards: {[name: string]: {title: string}}\n\t\tdefault: string\n\t\tstaff: string\n\t\tpsuedo: string[][]\n\t\tlinks: string[][]\n\t}\n\n\tlang: {\n\t\tdefault: string\n\t\tenabled: string[]\n\t}\n\n\tstaff: {\n\t\tclasses: {[name: string]: StaffClass}\n\t\tkeyword: string\n\t}\n\n\timages: {\n\t\tthumb: {\n\t\t\tthumbDims: number[]\n\t\t\tmidDims: number[]\n\t\t}\n\t\tspoilers: number[]\n\t\thats: boolean\n\t}\n\n\tbanners: string[]\n\tFAQ: string[]\n\teightball: string[]\n\tradio: boolean\n\tillyaDance: boolean\n\tfeedbackEmail: string\n\tdefaultCSS: string\n\tinfoBanner: string\n}\n\ntype StaffClass = {\n\talias: string\n\trights: {[right: string]: boolean}\n}\n\n// Configuration passed from the server. Some values can be changed during\n// runtime.\nexport const config: Configs = (window as any).config\n\n// Indicates, if in mobile mode. Determined server-side.\nexport const isMobile: boolean = (window as any).isMobile\n\ninterface PageState {\n\tboard: string\n\tthread: number\n\tlastN: number\n}\n\n// Read page state by parsing a URL\nfunction read(href: string): PageState {\n\tconst board = href.match(/\\/([a-zA-Z0-9]+?)\\//)[1],\n\t\tthread = href.match(/\\/(\\d+)(:?#\\d+)?(?:[\\?&]\\w+=\\w+)*$/),\n\t\tlastN = href.match(/[\\?&]last=(\\d+)/)\n\treturn {\n\t\tboard,\n\t\tthread: thread ? parseInt(thread[1]) : 0,\n\t\tlastN: lastN ? parseInt(lastN[1]) : 0,\n\t}\n}\n\n// Load initial page state\nexport const page = new Model(read(location.href))\n\n// Cached DOM elements\nexport const $thread = document.query('threads')\nexport const $name = document.query('#name')\nexport const $email = document.query('#email')\nexport const $banner = document.query('#banner')\nexport const $loading = document.query('#loadingImage')\n\n// All posts currently displayed\nexport const posts = new Collection<Post>()\n\n// Posts I made in any tab\nexport let mine: Set<number>\n\n// Load post number sets from the database\nexport async function loadFromDB() {\n\tconst resMine = await db\n\t\t.transaction('posts', 'readonly')\n\t\t.objectStore('posts')\n\t\t.get('mine')\n\t\t.exec()\n\tdelete resMine.id\n\tmine = new Set<number>([resMine])\n}\n\n// Posts I made in this tab\nexport const ownPosts = new Set<number>()\n\n// Tracks the synchronisation counter of each thread/board\nexport const syncs = {}\n\n// Retrieve model of closest parent post\nexport function getModel(el: Element): Post {\n\tconst id = getID(el)\n\tif (!id) {\n\t\treturn null\n\t}\n\treturn posts.get(id)\n}\n\n// Display or hide the loading animation\nexport function displayLoading(loading: boolean) {\n\t$loading.style.display = loading ? 'block' : 'none'\n}\n\n// Debug mode with more verbose logging\nexport const debug = /[\\?&]debug=true/.test(location.href)\n"],"sourceRoot":"/source/"}