{"version":3,"sources":["options.ts"],"names":[],"mappings":"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","file":"options.js","sourcesContent":["/*\n User-set settings storage and change handling\n*/\n\nimport Model from './model'\nimport {extend} from 'underscore'\nimport {OptionSpec, specs, optionType, OptionValue} from './options/specs'\nimport OptionsPanel from './options/view'\nimport {defer} from './defer'\n\n// Delete legacy options localStorage entry, if any\nlocalStorage.removeItem(\"options\")\n\n// Central options storage model\nconst options = new Model()\nexport default options\n\n// All loaded option models\nexport const models: {[key: string]: OptionModel} = {}\n\n// Option model IDs\nexport type OptionID =\n\t'lang' | 'inlineFit' | 'thumbs' | 'imageHover' | 'webmHover' | 'autogif'\n\t| 'spoilers' | 'notification' | 'anonymise' | 'relativeTime' | 'nowPlaying'\n\t| 'illyaDance' | 'illyaDanceMute' | 'horizontalPosting' | 'replyRight'\n\t| 'theme' | 'userBG' | 'userBGImage' | 'lastN' | 'alwaysLock' | 'newPost'\n\t| 'toggleSpoiler' | 'textSpoiler' | 'done' | 'expandAll' |'workMode'\n\t| 'export' | 'import' | 'hidden' | 'workModeToggle' | 'google' | 'iqdb'\n\t| 'saucenao' | 'desustorage' | 'exhentai'\n\n// Controler for each individual option\nclass OptionModel {\n\tid: OptionID\n\tspec: OptionSpec\n\n\t// Create new option model from template spec\n\tconstructor(spec: OptionSpec) {\n\t\t// Condition for loading option. Optional.\n\t\tif (spec.noLoad) {\n\t\t\treturn\n\t\t}\n\t\tthis.spec = spec\n\t\tthis.id = this.spec.id\n\n\t\t// No type = checkbox + default false\n\t\tif (!spec.type) {\n\t\t\tspec.type = optionType.checkbox\n\t\t}\n\n\t\t// Store option value in central stotage options Model\n\t\tconst val = options.attrs[this.id] = this.get()\n\t\toptions.onChange(this.id, val =>\n\t\t\tthis.onChange(val))\n\t\tif (!spec.noExecOnStart) {\n\t\t\tthis.execute(val)\n\t\t}\n\t\tmodels[this.id] = this\n\t}\n\n\t// Read value from localStorage\n\tprivate read(): string {\n\t\treturn localStorage.getItem(this.id) || \"\"\n\t}\n\n\t// Retrieve option value from storage and parse result. If none, return\n\tget(): OptionValue {\n\t\tconst stored = this.read()\n\t\tif (!stored) {\n\t\t\treturn this.spec.default\n\t\t} else {\n\t\t\tif (stored === 'false') {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif (stored === \"true\") {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tconst num = parseInt(stored, 10)\n\t\t\tif (num || num === 0) {\n\t\t\t\treturn num\n\t\t\t}\n\t\t\treturn this.spec.default\n\t\t}\n\t}\n\n\t// Handler to be executed on field change in central options storage model\n\tprivate onChange(val: OptionValue) {\n\t\tthis.execute(val)\n\t\tthis.set(val)\n\t}\n\n\t// Execute handler function, if any\n\tprivate execute(val: OptionValue) {\n\t\tif (this.spec.exec) {\n\t\t\tthis.spec.exec(val)\n\t\t}\n\t}\n\n\t// Write value to localStorage, if needed\n\tset(val: OptionValue) {\n\t\tif (val !== this.spec.default || this.read()) {\n\t\t\tlocalStorage.setItem(this.id, val.toString())\n\t\t}\n\t}\n\n\t// Perform value validation, if any. Othervise return true.\n\tvalidate(val: OptionValue): boolean {\n\t\tif (this.spec.validation) {\n\t\t\treturn this.spec.validation(val)\n\t\t}\n\t\treturn true\n\t}\n}\n\n// Populate option model collection and central model\nfor (let spec of specs) {\n\tnew OptionModel(spec)\n}\n\ndefer(() => new OptionsPanel())\n"],"sourceRoot":"/source/"}