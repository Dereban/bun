{"version":3,"sources":["model.ts"],"names":[],"mappings":"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","file":"model.js","sourcesContent":["import {extend} from 'underscore'\nimport Collection from './collection'\nimport View from './view'\n\nexport type ModelAttrs = {[attr: string]: any}\nexport type HookHandler = (arg: any) => void\nexport type HookMap = {[key: string]: HookHandler[]}\n\n// Generic model class, that all other model classes extend\nexport default class Model {\n\tattrs: ModelAttrs\n\tid: string|number\n\tcollection: Collection<Model>\n\tviews: Set<View> = new Set<View>()\n\tprivate changeHooks: HookMap = {}\n\n\tconstructor(attrs: ModelAttrs = {}) {\n\t\tthis.attrs = attrs\n\t}\n\n\t// Retrieve a stored value of specific key from the model's attribute\n\t// object\n\tget(key: string): any {\n\t\treturn this.attrs[key]\n\t}\n\n\t// Set a key to a target value\n\tset(key: string, val: any) {\n\t\tthis.attrs[key] = val\n\t\tthis.execChangeHooks(key, val)\n\t}\n\n\t// Extend the model attribute hash, with the suplied object. Shorthand, for\n\t// setting multiple fields simultaniously.\n\tsetAttrs(attrs: ModelAttrs) {\n\t\textend(this.attrs, attrs)\n\t\tfor (let key in attrs) {\n\t\t\tthis.execChangeHooks(key, attrs[key])\n\t\t}\n\t}\n\n\t// Append value to an array strored at the given key. If the array does not\n\t// exist, it is created.\n\tappend(key: string, val: any) {\n\t\tif (this.attrs[key]) {\n\t\t\tthis.attrs[key].push(val)\n\t\t} else {\n\t\t\tthis.attrs[key] = [val]\n\t\t}\n\t\tthis.execChangeHooks(key, this.get(key))\n\t}\n\n\t// Extend an object at target key. If key does not exist, simply assign the\n\t// object to the key.\n\textend(key: string, object: {}) {\n\t\tif (this.attrs[key]) {\n\t\t\textend(this.attrs[key], object)\n\t\t} else {\n\t\t\tthis.attrs[key] = object\n\t\t}\n\t\tthis.execChangeHooks(key, this.get(key))\n\t}\n\n\t// Add a function to be executed, when .set(), .setAttrs(), .append() or\n\t// .extend() modify a key's value.\n\tonChange(key: string, func: HookHandler) {\n\t\tif (this.changeHooks[key]) {\n\t\t\tthis.changeHooks[key].push(func)\n\t\t} else {\n\t\t\tthis.changeHooks[key] = [func]\n\t\t}\n\t}\n\n\t// Execute handlers hooked into key change, if any\n\tprivate execChangeHooks(key: string, val: any) {\n\t\tconst hooks = this.changeHooks[key]\n\t\tif (!hooks) {\n\t\t\treturn\n\t\t}\n\t\tfor (let func of hooks) {\n\t\t\tfunc(val)\n\t\t}\n\t}\n\n\t// Remove the model from its collection, detach all references and allow to\n\t// be garbage collected.\n\tremove() {\n\t\tif (this.collection) {\n\t\t\tthis.collection.remove(this)\n\t\t}\n\t\tdelete this.changeHooks\n\t\tdelete this.attrs\n\t\tfor (let view of this.views) {\n\t\t\tview.remove()\n\t\t}\n\t}\n\n\t// Attach a view to the model. Each model can have several views attached to\n\t// it.\n\tattach(view: View) {\n\t\tthis.views.add(view)\n\t}\n\n\t// Detach a view from the model\n\tdetach(view: View) {\n\t\tthis.views.delete(view)\n\t}\n}\n"],"sourceRoot":"/source/"}