{"version":3,"sources":["view.ts"],"names":[],"mappings":";;;;;;;;;;;;;;YAYA;gBAOC,YAAY,EAAC,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAY;oBAC/C,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,IAAI,eAAK,EAAE,CAAA;oBACjC,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,QAAQ,CAAC,aAAa,CAAC,GAAG,IAAI,KAAK,CAAC,CAAA;oBACpD,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;wBACR,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;oBAC/B,CAAC;oBACD,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;wBACT,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,CAAC,CAAA;oBACnC,CAAC;oBACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;gBACxB,CAAC;gBAID,MAAM;oBACL,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,CAAA;oBAChB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;oBACvB,OAAO,IAAI,CAAC,KAAK,CAAA;gBAClB,CAAC;gBAGD,EAAE,CAAC,IAAY,EAAE,QAAgB,EAAE,EAAiB;oBACnD,SAAE,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAA;gBAChC,CAAC;gBAID,OAAO,CAAC,MAA2C;oBAClD,GAAG,CAAC,CAAC,IAAI,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC;wBAC7B,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA;oBAC7C,CAAC;gBACF,CAAC;gBAGD,KAAK,CAAC,IAAY,EAAE,EAAiB;oBACpC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;gBACnC,CAAC;gBAID,IAAI,CAAC,IAAY,EAAE,QAAgB,EAAE,EAAiB;oBACrD,WAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAA;gBAClC,CAAC;gBAGD,OAAO,CAAC,IAAY,EAAE,EAAiB;oBACtC,cAAO,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAA;gBAC3B,CAAC;YACF,CAAC;YAvDD,0BAuDC,CAAA","file":"view.js","sourcesContent":["import {on, once, onceAll} from './util'\nimport Model from './model'\n\nexport type ViewAttrs = {\n\tel?: Element\n\tmodel?: Model\n\ttag?: string\n\tcls?: string\n\tid?: string\n}\n\n// Generic view class, that all over view classes extend\nexport default class View {\n\tmodel: Model\n\tel: Element\n\n\t// Creates a new View and binds it to the target model. If none, creates a\n\t// blank model. If no element suplied, creates a new one from tags. Sets\n\t// class and id, if supplied.\n\tconstructor({el, model, tag, cls, id}: ViewAttrs) {\n\t\tthis.model = model || new Model()\n\t\tthis.el = el || document.createElement(tag || 'div')\n\t\tif (id) {\n\t\t\tthis.el.setAttribute('id', id)\n\t\t}\n\t\tif (cls) {\n\t\t\tthis.el.setAttribute('class', cls)\n\t\t}\n\t\tthis.model.attach(this)\n\t}\n\n\t// Remove the element from the DOM and detach from its model, allowing the\n\t// View instance to be garbage collected.\n\tremove() {\n\t\tthis.el.remove()\n\t\tthis.model.detach(this)\n\t\tdelete this.model\n\t}\n\n\t// Add selector-specific event listeners to the view\n\ton(type: string, selector: string, fn: EventListener) {\n\t\ton(this.el, type, selector, fn)\n\t}\n\n\t// Shorthand for adding multiple click event listeners as an object.\n\t// We use those the most, so nice to have.\n\tonClick(events: {[selector: string]: EventListener}) {\n\t\tfor (let selector in events) {\n\t\t\tthis.on('click', selector, events[selector])\n\t\t}\n\t}\n\n\t// Add event listener to view's element, whithout filtering by selector\n\tonAll(type: string, fn: EventListener) {\n\t\tthis.el.addEventListener(type, fn)\n\t}\n\n\t// Add selector-specific event listener, that will execute only once on a\n\t// specific target\n\tonce(type: string, selector: string, fn: EventListener) {\n\t\tonce(this.el, type, selector, fn)\n\t}\n\n\t// Add event listener, that will execute only once\n\tonceAll(type: string, fn: EventListener) {\n\t\tonceAll(this.el, type, fn)\n\t}\n}\n"],"sourceRoot":"/source/"}