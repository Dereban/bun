{"version":3,"sources":["fetch.js"],"names":["self","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","value","Headers","headers","this","map","forEach","append","Object","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","support","Blob","prototype","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","arrayBuffer","ArrayBuffer","Error","get","set","type","rejected","then","text","decode","json","JSON","parse","normalizeMethod","method","upcased","toUpperCase","methods","indexOf","Request","input","options","url","credentials","mode","referrer","form","trim","split","bytes","shift","replace","join","decodeURIComponent","xhr","head","pairs","getAllResponseHeaders","header","key","Response","bodyInit","status","ok","statusText","fetch","list","push","values","getAll","has","hasOwnProperty","callback","thisArg","call","e","clone","response","redirectStatuses","redirect","RangeError","location","init","responseURL","getResponseHeader","request","XMLHttpRequest","responseText","open","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"fetch.js","sourcesContent":["(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  var support = {\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob();\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = xhr.getAllResponseHeaders().trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers;\n  self.Request = Request;\n  self.Response = Response;\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return;\n      }\n\n      xhr.onload = function() {\n        var status = (xhr.status === 1223) ? 204 : xhr.status\n        if (status < 100 || status > 599) {\n          reject(new TypeError('Network request failed'))\n          return\n        }\n        var options = {\n          status: status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n"],"sourceRoot":"/source/"}